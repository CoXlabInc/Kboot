
bootloader:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_start>:
    80000000:	0040006f          	j	80000004 <main>

0000000080000004 <main>:
    dst = &_bss;
    while(dst < &_ebss)
        *dst++ = 0;*/

    // Without this command every character is printed twice !?
    rom_printf("");
    80000004:	00002797          	auipc	a5,0x2
    80000008:	f9c7b783          	ld	a5,-100(a5) # 80001fa0 <__TMC_END__+0x20>
    8000000c:	639c                	ld	a5,0(a5)
{
    8000000e:	7115                	addi	sp,sp,-224
    80000010:	ed86                	sd	ra,216(sp)
    80000012:	e9a2                	sd	s0,208(sp)
    80000014:	e1ca                	sd	s2,192(sp)
    80000016:	e5a6                	sd	s1,200(sp)
    80000018:	fd4e                	sd	s3,184(sp)
    8000001a:	f952                	sd	s4,176(sp)
    8000001c:	f556                	sd	s5,168(sp)
    8000001e:	f15a                	sd	s6,160(sp)
    80000020:	ed5e                	sd	s7,152(sp)
    80000022:	e962                	sd	s8,144(sp)
    80000024:	e566                	sd	s9,136(sp)
    80000026:	e16a                	sd	s10,128(sp)
    80000028:	fcee                	sd	s11,120(sp)
    rom_printf("");
    8000002a:	00002517          	auipc	a0,0x2
    8000002e:	a4e50513          	addi	a0,a0,-1458 # 80001a78 <CSWTCH.3+0x248>
    80000032:	9782                	jalr	a5

    // ----------------------------------------------------------------------------------------------
    // === Initialize SPI Flash driver ===
    // spi clock init (SPI3 clock source is PLL0/2)
    sysctl->clk_sel0.spi3_clk_sel = 1;
    80000034:	50440737          	lui	a4,0x50440
    80000038:	531c                	lw	a5,32(a4)
    8000003a:	6685                	lui	a3,0x1
    sysctl->clk_en_peri.spi3_clk_en = 1;
    sysctl->clk_th1.spi3_clk_threshold = 0;
    8000003c:	01000637          	lui	a2,0x1000
    sysctl->clk_sel0.spi3_clk_sel = 1;
    80000040:	8fd5                	or	a5,a5,a3
    80000042:	d31c                	sw	a5,32(a4)
    sysctl->clk_en_peri.spi3_clk_en = 1;
    80000044:	5754                	lw	a3,44(a4)
    sysctl->clk_th1.spi3_clk_threshold = 0;
    80000046:	167d                	addi	a2,a2,-1

    // spi3 init
    // sets spi clock to 43.333333 MHz (SPI3 clock is 390 MHz)
    spi_handle->baudr = 9;
    80000048:	540007b7          	lui	a5,0x54000
    sysctl->clk_en_peri.spi3_clk_en = 1;
    8000004c:	2006e693          	ori	a3,a3,512
    80000050:	d754                	sw	a3,44(a4)
    sysctl->clk_th1.spi3_clk_threshold = 0;
    80000052:	5f54                	lw	a3,60(a4)
    // Enable XIP mode
    spi_handle->xip_ctrl = (0x01 << 29) | (0x02 << 26) | (0x01 << 23) | (0x01 << 22) | (0x04 << 13) |
                (0x01 << 12) | (0x02 << 9) | (0x06 << 4) | (0x01 << 2) | 0x02;
    spi_handle->xip_incr_inst = 0xEB;
    spi_handle->xip_mode_bits = 0x00;
    spi_handle->xip_ser = 0x01;
    80000054:	4405                	li	s0,1
    spi_handle->ssienr = 0x01;
    sysctl->peri.spi3_xip_en = 1;
    usleep(200);
    80000056:	0c800513          	li	a0,200
    sysctl->clk_th1.spi3_clk_threshold = 0;
    8000005a:	8ef1                	and	a3,a3,a2
    8000005c:	df54                	sw	a3,60(a4)
    spi_handle->baudr = 9;
    8000005e:	46a5                	li	a3,9
    80000060:	cbd4                	sw	a3,20(a5)
    spi_handle->imr = 0x00;
    80000062:	0207a623          	sw	zero,44(a5) # 5400002c <_start-0x2bffffd4>
    spi_handle->dmacr = 0x00;
    80000066:	0407a623          	sw	zero,76(a5)
    spi_handle->dmatdlr = 0x10;
    8000006a:	46c1                	li	a3,16
    8000006c:	cbb4                	sw	a3,80(a5)
    spi_handle->dmardlr = 0x00;
    8000006e:	0407aa23          	sw	zero,84(a5)
    spi_handle->ser = 0x00;
    80000072:	0007a823          	sw	zero,16(a5)
    spi_handle->ctrlr0 = (SPI_WORK_MODE_0 << 8) | (SPI_FF_QUAD << 22) | (7 << 0);
    80000076:	008006b7          	lui	a3,0x800
    spi_handle->ssienr = 0x00;
    8000007a:	0007a423          	sw	zero,8(a5)
    spi_handle->ctrlr0 = (SPI_WORK_MODE_0 << 8) | (SPI_FF_QUAD << 22) | (7 << 0);
    8000007e:	269d                	addiw	a3,a3,7
    80000080:	c394                	sw	a3,0(a5)
    spi_handle->spi_ctrlr0 = 0;
    80000082:	0e07aa23          	sw	zero,244(a5)
    spi_handle->xip_ctrl = (0x01 << 29) | (0x02 << 26) | (0x01 << 23) | (0x01 << 22) | (0x04 << 13) |
    80000086:	28c096b7          	lui	a3,0x28c09
    spi_handle->endian = 0;
    8000008a:	1007ac23          	sw	zero,280(a5)
    spi_handle->xip_ctrl = (0x01 << 29) | (0x02 << 26) | (0x01 << 23) | (0x01 << 22) | (0x04 << 13) |
    8000008e:	4666869b          	addiw	a3,a3,1126
    80000092:	10d7a423          	sw	a3,264(a5)
    spi_handle->xip_incr_inst = 0xEB;
    80000096:	0eb00693          	li	a3,235
    8000009a:	10d7a023          	sw	a3,256(a5)
    spi_handle->xip_mode_bits = 0x00;
    8000009e:	0e07ae23          	sw	zero,252(a5)
    spi_handle->xip_ser = 0x01;
    800000a2:	1087a623          	sw	s0,268(a5)
    spi_handle->ssienr = 0x01;
    800000a6:	c780                	sw	s0,8(a5)
    sysctl->peri.spi3_xip_en = 1;
    800000a8:	4f3c                	lw	a5,88(a4)
    800000aa:	66a1                	lui	a3,0x8
    // ----------------------------------------------------------------------------------------------

    cfg_magic = cfg_flash_ptr[BOOT_CONFIG_ITEMS];
    print_enabled = (cfg_magic == MAGIC_ID) ? 0 : 1;
    800000ac:	00002917          	auipc	s2,0x2
    800000b0:	eb890913          	addi	s2,s2,-328 # 80001f64 <print_enabled>
    sysctl->peri.spi3_xip_en = 1;
    800000b4:	8fd5                	or	a5,a5,a3
    800000b6:	cf3c                	sw	a5,88(a4)
    usleep(200);
    800000b8:	00001097          	auipc	ra,0x1
    800000bc:	06c080e7          	jalr	108(ra) # 80001124 <usleep>
    cfg_magic = cfg_flash_ptr[BOOT_CONFIG_ITEMS];
    800000c0:	540207b7          	lui	a5,0x54020
    800000c4:	5398                	lw	a4,32(a5)
    print_enabled = (cfg_magic == MAGIC_ID) ? 0 : 1;
    800000c6:	5aa5d7b7          	lui	a5,0x5aa5d
    800000ca:	0c078793          	addi	a5,a5,192 # 5aa5d0c0 <_start-0x255a2f40>
    800000ce:	40f706b3          	sub	a3,a4,a5
    800000d2:	00d036b3          	snez	a3,a3
    cfg_magic = cfg_flash_ptr[BOOT_CONFIG_ITEMS];
    800000d6:	00002617          	auipc	a2,0x2
    800000da:	e4e62d23          	sw	a4,-422(a2) # 80001f30 <cfg_magic>
    print_enabled = (cfg_magic == MAGIC_ID) ? 0 : 1;
    800000de:	00002617          	auipc	a2,0x2
    800000e2:	e8d62323          	sw	a3,-378(a2) # 80001f64 <print_enabled>
    if (print_enabled) {
    800000e6:	24f711e3          	bne	a4,a5,80000b28 <main+0xb24>
        gpiohs_set_drive_mode(GPIO_KEY, GPIO_DM_INPUT_PULL_UP);
        usleep(1000);
        boot_pin = gpiohs_get_pin(GPIO_KEY);
    }
    else {
        boot_pin = 1;
    800000ea:	00002797          	auipc	a5,0x2
    800000ee:	a287a323          	sw	s0,-1498(a5) # 80001b10 <boot_pin>
    }

    LOG("\nK210 bootloader by LoBo v.1.2\n\n");
    800000f2:	00002497          	auipc	s1,0x2
    800000f6:	e964b483          	ld	s1,-362(s1) # 80001f88 <__TMC_END__+0x8>

    // === Read boot configuration from flash address 0x20000 ===
    LOG("* Find applications in MAIN parameters\n");

    // Check boot entries
    app_size = APP_SIZE;
    800000fa:	000507b7          	lui	a5,0x50
    800000fe:	00002717          	auipc	a4,0x2
    80000102:	a0f72123          	sw	a5,-1534(a4) # 80001b00 <app_size>
    app_flash_start = DEFAULT_APP_ADDR;
    80000106:	000307b7          	lui	a5,0x30
    8000010a:	00002717          	auipc	a4,0x2
    8000010e:	9cf72723          	sw	a5,-1586(a4) # 80001ad8 <app_flash_start>
    if (app_id != 0xdeadbeef) {
    80000112:	deadc737          	lui	a4,0xdeadc
    cfg_offset = 0;
    80000116:	00002797          	auipc	a5,0x2
    8000011a:	e007af23          	sw	zero,-482(a5) # 80001f34 <cfg_offset>

check_cfg:
    for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
        get_params(i);

        if ((cfg_magic & MAGIC_ID_MASK) == MAGIC_ID) {
    8000011e:	5aa5d9b7          	lui	s3,0x5aa5d
    if (app_id != 0xdeadbeef) {
    80000122:	eef70713          	addi	a4,a4,-273 # ffffffffdeadbeef <completed.5485+0xffffffff5ead9f37>
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000126:	edb88b37          	lui	s6,0xedb88
    cfg_offset = 0;
    8000012a:	4781                	li	a5,0
    8000012c:	00002d17          	auipc	s10,0x2
    80000130:	9d4d0d13          	addi	s10,s10,-1580 # 80001b00 <app_size>
    80000134:	00002b97          	auipc	s7,0x2
    80000138:	de4b8b93          	addi	s7,s7,-540 # 80001f18 <cfg_address>
    8000013c:	00002c97          	auipc	s9,0x2
    80000140:	dfcc8c93          	addi	s9,s9,-516 # 80001f38 <cfg_size>
    80000144:	00002c17          	auipc	s8,0x2
    80000148:	decc0c13          	addi	s8,s8,-532 # 80001f30 <cfg_magic>
    8000014c:	00002a97          	auipc	s5,0x2
    80000150:	e14a8a93          	addi	s5,s5,-492 # 80001f60 <i>
    80000154:	02010d93          	addi	s11,sp,32
    80000158:	00002a17          	auipc	s4,0x2
    8000015c:	ddca0a13          	addi	s4,s4,-548 # 80001f34 <cfg_offset>
        if ((cfg_magic & MAGIC_ID_MASK) == MAGIC_ID) {
    80000160:	0c098993          	addi	s3,s3,192 # 5aa5d0c0 <_start-0x255a2f40>
    if (app_id != 0xdeadbeef) {
    80000164:	e03a                	sd	a4,0(sp)
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000166:	320b0b13          	addi	s6,s6,800 # ffffffffedb88320 <completed.5485+0xffffffff6db86368>
    for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    8000016a:	00002717          	auipc	a4,0x2
    8000016e:	de072b23          	sw	zero,-522(a4) # 80001f60 <i>
    80000172:	4581                	li	a1,0
    offset = (i*32) + cfg_offset + 0x10; // 8bit offset
    80000174:	0055971b          	slliw	a4,a1,0x5
    80000178:	9f3d                	addw	a4,a4,a5
    offset = (i*8) + (cfg_offset / 4); // 32bit offset
    8000017a:	0027d61b          	srliw	a2,a5,0x2
    offset = (i*32) + cfg_offset + 0x10; // 8bit offset
    8000017e:	0107031b          	addiw	t1,a4,16
    offset = (i*8) + (cfg_offset / 4); // 32bit offset
    80000182:	0035969b          	slliw	a3,a1,0x3
    80000186:	9eb1                	addw	a3,a3,a2
    key = cfg_flash_bptr[offset]; // dummy read needed to switch to 8bit XiP read
    80000188:	1302                	slli	t1,t1,0x20
    cfg_magic = cfg_flash_ptr[offset + 0];
    8000018a:	540207b7          	lui	a5,0x54020
    cfg_address = cfg_flash_ptr[offset + 1];
    8000018e:	0016889b          	addiw	a7,a3,1
    cfg_size = cfg_flash_ptr[offset + 2];
    80000192:	0026851b          	addiw	a0,a3,2
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000196:	0036861b          	addiw	a2,a3,3
    key = cfg_flash_bptr[offset]; // dummy read needed to switch to 8bit XiP read
    8000019a:	02035313          	srli	t1,t1,0x20
    8000019e:	933e                	add	t1,t1,a5
    cfg_magic = cfg_flash_ptr[offset + 0];
    800001a0:	1682                	slli	a3,a3,0x20
    cfg_address = cfg_flash_ptr[offset + 1];
    800001a2:	1882                	slli	a7,a7,0x20
    cfg_size = cfg_flash_ptr[offset + 2];
    800001a4:	1502                	slli	a0,a0,0x20
    cfg_crc = cfg_flash_ptr[offset + 3];
    800001a6:	1602                	slli	a2,a2,0x20
    key = cfg_flash_bptr[offset]; // dummy read needed to switch to 8bit XiP read
    800001a8:	00034e03          	lbu	t3,0(t1)
        cfg_info[n] = cfg_flash_bptr[offset + n];
    800001ac:	01170e9b          	addiw	t4,a4,17
    cfg_magic = cfg_flash_ptr[offset + 0];
    800001b0:	9281                	srli	a3,a3,0x20
    cfg_address = cfg_flash_ptr[offset + 1];
    800001b2:	0208d893          	srli	a7,a7,0x20
    cfg_size = cfg_flash_ptr[offset + 2];
    800001b6:	9101                	srli	a0,a0,0x20
    cfg_crc = cfg_flash_ptr[offset + 3];
    800001b8:	9201                	srli	a2,a2,0x20
    cfg_magic = cfg_flash_ptr[offset + 0];
    800001ba:	068a                	slli	a3,a3,0x2
    cfg_address = cfg_flash_ptr[offset + 1];
    800001bc:	088a                	slli	a7,a7,0x2
    cfg_size = cfg_flash_ptr[offset + 2];
    800001be:	050a                	slli	a0,a0,0x2
    cfg_crc = cfg_flash_ptr[offset + 3];
    800001c0:	060a                	slli	a2,a2,0x2
        cfg_info[n] = cfg_flash_bptr[offset + n];
    800001c2:	1e82                	slli	t4,t4,0x20
    cfg_magic = cfg_flash_ptr[offset + 0];
    800001c4:	96be                	add	a3,a3,a5
    cfg_size = cfg_flash_ptr[offset + 2];
    800001c6:	953e                	add	a0,a0,a5
    cfg_address = cfg_flash_ptr[offset + 1];
    800001c8:	98be                	add	a7,a7,a5
    cfg_crc = cfg_flash_ptr[offset + 3];
    800001ca:	963e                	add	a2,a2,a5
        cfg_info[n] = cfg_flash_bptr[offset + n];
    800001cc:	020ede93          	srli	t4,t4,0x20
    cfg_size = cfg_flash_ptr[offset + 2];
    800001d0:	00052303          	lw	t1,0(a0)
    cfg_address = cfg_flash_ptr[offset + 1];
    800001d4:	0008a883          	lw	a7,0(a7)
    cfg_magic = cfg_flash_ptr[offset + 0];
    800001d8:	4288                	lw	a0,0(a3)
    cfg_crc = cfg_flash_ptr[offset + 3];
    800001da:	4210                	lw	a2,0(a2)
        cfg_info[n] = cfg_flash_bptr[offset + n];
    800001dc:	01d786b3          	add	a3,a5,t4
    800001e0:	00002417          	auipc	s0,0x2
    800001e4:	d5c40023          	sb	t3,-704(s0) # 80001f20 <cfg_info>
    800001e8:	0006ce03          	lbu	t3,0(a3) # 8000 <_start-0x7fff8000>
    800001ec:	0127069b          	addiw	a3,a4,18
    800001f0:	1682                	slli	a3,a3,0x20
    800001f2:	9281                	srli	a3,a3,0x20
    800001f4:	00002417          	auipc	s0,0x2
    800001f8:	d3c406a3          	sb	t3,-723(s0) # 80001f21 <cfg_info+0x1>
    800001fc:	96be                	add	a3,a3,a5
    800001fe:	0006ce03          	lbu	t3,0(a3)
    80000202:	0137069b          	addiw	a3,a4,19
    80000206:	1682                	slli	a3,a3,0x20
    80000208:	9281                	srli	a3,a3,0x20
    8000020a:	00002417          	auipc	s0,0x2
    8000020e:	d1c40c23          	sb	t3,-744(s0) # 80001f22 <cfg_info+0x2>
    80000212:	96be                	add	a3,a3,a5
    80000214:	0006ce03          	lbu	t3,0(a3)
    80000218:	0147069b          	addiw	a3,a4,20
    8000021c:	1682                	slli	a3,a3,0x20
    8000021e:	9281                	srli	a3,a3,0x20
    80000220:	00002417          	auipc	s0,0x2
    80000224:	d1c401a3          	sb	t3,-765(s0) # 80001f23 <cfg_info+0x3>
    80000228:	96be                	add	a3,a3,a5
    8000022a:	0006ce03          	lbu	t3,0(a3)
    8000022e:	0157069b          	addiw	a3,a4,21
    80000232:	1682                	slli	a3,a3,0x20
    80000234:	9281                	srli	a3,a3,0x20
    80000236:	00002417          	auipc	s0,0x2
    8000023a:	cfc40723          	sb	t3,-786(s0) # 80001f24 <cfg_info+0x4>
    8000023e:	96be                	add	a3,a3,a5
    80000240:	0006ce03          	lbu	t3,0(a3)
    80000244:	0167069b          	addiw	a3,a4,22
    80000248:	1682                	slli	a3,a3,0x20
    8000024a:	9281                	srli	a3,a3,0x20
    8000024c:	00002417          	auipc	s0,0x2
    80000250:	cdc40ca3          	sb	t3,-807(s0) # 80001f25 <cfg_info+0x5>
    80000254:	96be                	add	a3,a3,a5
    80000256:	0006ce03          	lbu	t3,0(a3)
    8000025a:	0177069b          	addiw	a3,a4,23
    8000025e:	1682                	slli	a3,a3,0x20
    80000260:	9281                	srli	a3,a3,0x20
    80000262:	00002417          	auipc	s0,0x2
    80000266:	cdc40223          	sb	t3,-828(s0) # 80001f26 <cfg_info+0x6>
    8000026a:	96be                	add	a3,a3,a5
    8000026c:	0006ce03          	lbu	t3,0(a3)
    80000270:	0187069b          	addiw	a3,a4,24
    80000274:	1682                	slli	a3,a3,0x20
    80000276:	9281                	srli	a3,a3,0x20
    80000278:	00002417          	auipc	s0,0x2
    8000027c:	cbc407a3          	sb	t3,-849(s0) # 80001f27 <cfg_info+0x7>
    80000280:	96be                	add	a3,a3,a5
    80000282:	0006ce03          	lbu	t3,0(a3)
    80000286:	0197069b          	addiw	a3,a4,25
    8000028a:	1682                	slli	a3,a3,0x20
    8000028c:	9281                	srli	a3,a3,0x20
    8000028e:	00002417          	auipc	s0,0x2
    80000292:	c9c40d23          	sb	t3,-870(s0) # 80001f28 <cfg_info+0x8>
    80000296:	96be                	add	a3,a3,a5
    80000298:	0006ce03          	lbu	t3,0(a3)
    8000029c:	01a7069b          	addiw	a3,a4,26
    800002a0:	1682                	slli	a3,a3,0x20
    800002a2:	9281                	srli	a3,a3,0x20
    800002a4:	00002417          	auipc	s0,0x2
    800002a8:	c9c402a3          	sb	t3,-891(s0) # 80001f29 <cfg_info+0x9>
    800002ac:	96be                	add	a3,a3,a5
    800002ae:	0006ce03          	lbu	t3,0(a3)
    800002b2:	01b7069b          	addiw	a3,a4,27
    800002b6:	1682                	slli	a3,a3,0x20
    800002b8:	9281                	srli	a3,a3,0x20
    800002ba:	00002417          	auipc	s0,0x2
    800002be:	c7c40823          	sb	t3,-912(s0) # 80001f2a <cfg_info+0xa>
    800002c2:	96be                	add	a3,a3,a5
    800002c4:	0006ce03          	lbu	t3,0(a3)
    800002c8:	01c7069b          	addiw	a3,a4,28
    800002cc:	1682                	slli	a3,a3,0x20
    800002ce:	9281                	srli	a3,a3,0x20
    800002d0:	96be                	add	a3,a3,a5
    800002d2:	00002417          	auipc	s0,0x2
    800002d6:	c5c40ca3          	sb	t3,-935(s0) # 80001f2b <cfg_info+0xb>
    cfg_magic = cfg_flash_ptr[offset + 0];
    800002da:	00002417          	auipc	s0,0x2
    800002de:	c4a42b23          	sw	a0,-938(s0) # 80001f30 <cfg_magic>
    cfg_address = cfg_flash_ptr[offset + 1];
    800002e2:	00002417          	auipc	s0,0x2
    800002e6:	c3142b23          	sw	a7,-970(s0) # 80001f18 <cfg_address>
    cfg_size = cfg_flash_ptr[offset + 2];
    800002ea:	00002417          	auipc	s0,0x2
    800002ee:	c4642723          	sw	t1,-946(s0) # 80001f38 <cfg_size>
    cfg_crc = cfg_flash_ptr[offset + 3];
    800002f2:	00002417          	auipc	s0,0x2
    800002f6:	c2c42523          	sw	a2,-982(s0) # 80001f1c <cfg_crc>
        cfg_info[n] = cfg_flash_bptr[offset + n];
    800002fa:	0006c603          	lbu	a2,0(a3)
    800002fe:	01d7069b          	addiw	a3,a4,29
    80000302:	1682                	slli	a3,a3,0x20
    80000304:	9281                	srli	a3,a3,0x20
    80000306:	00002417          	auipc	s0,0x2
    8000030a:	c2c40323          	sb	a2,-986(s0) # 80001f2c <cfg_info+0xc>
    8000030e:	96be                	add	a3,a3,a5
    80000310:	0006c683          	lbu	a3,0(a3)
    80000314:	2779                	addiw	a4,a4,30
    80000316:	1702                	slli	a4,a4,0x20
    80000318:	9301                	srli	a4,a4,0x20
    8000031a:	00002617          	auipc	a2,0x2
    8000031e:	c0d609a3          	sb	a3,-1005(a2) # 80001f2d <cfg_info+0xd>
    80000322:	97ba                	add	a5,a5,a4
    80000324:	0007c783          	lbu	a5,0(a5) # 54020000 <_start-0x2bfe0000>
    80000328:	00001417          	auipc	s0,0x1
    8000032c:	7b840413          	addi	s0,s0,1976 # 80001ae0 <app_hash>
    offset = cfg_address + cfg_size + 5;
    80000330:	006886bb          	addw	a3,a7,t1
        cfg_info[n] = cfg_flash_bptr[offset + n];
    80000334:	00002717          	auipc	a4,0x2
    80000338:	bef70d23          	sb	a5,-1030(a4) # 80001f2e <cfg_info+0xe>
        app_hash[n] = app_flash_ptr[offset + n];
    8000033c:	9e81                	subw	a3,a3,s0
    cfg_info[15] = 0;
    8000033e:	00002797          	auipc	a5,0x2
    80000342:	be0788a3          	sb	zero,-1039(a5) # 80001f2f <cfg_info+0xf>
    offset = cfg_address + cfg_size + 5;
    80000346:	8722                	mv	a4,s0
        app_hash[n] = app_flash_ptr[offset + n];
    80000348:	2695                	addiw	a3,a3,5
    8000034a:	54000637          	lui	a2,0x54000
    8000034e:	00e687bb          	addw	a5,a3,a4
    80000352:	1782                	slli	a5,a5,0x20
    80000354:	9381                	srli	a5,a5,0x20
    80000356:	97b2                	add	a5,a5,a2
    80000358:	0007c783          	lbu	a5,0(a5)
    8000035c:	0705                	addi	a4,a4,1
    8000035e:	fef70fa3          	sb	a5,-1(a4)
    for (int n=0; n<SHA256_HASH_LEN; n++) {
    80000362:	feed16e3          	bne	s10,a4,8000034e <main+0x34a>
        if ((cfg_magic & MAGIC_ID_MASK) == MAGIC_ID) {
    80000366:	9941                	andi	a0,a0,-16
    80000368:	01350d63          	beq	a0,s3,80000382 <main+0x37e>
    for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    8000036c:	2585                	addiw	a1,a1,1
    8000036e:	00002717          	auipc	a4,0x2
    80000372:	beb72923          	sw	a1,-1038(a4) # 80001f60 <i>
    80000376:	479d                	li	a5,7
    80000378:	12b7e363          	bltu	a5,a1,8000049e <main+0x49a>
    8000037c:	000a2783          	lw	a5,0(s4)
    80000380:	bbd5                	j	80000174 <main+0x170>
            // *** Valid configuration found
            LOG("    %u: '%15s', ", i, cfg_info);
    80000382:	00092703          	lw	a4,0(s2)
    80000386:	18070563          	beqz	a4,80000510 <main+0x50c>
    8000038a:	609c                	ld	a5,0(s1)
    8000038c:	00002617          	auipc	a2,0x2
    80000390:	b9460613          	addi	a2,a2,-1132 # 80001f20 <cfg_info>
    80000394:	00001517          	auipc	a0,0x1
    80000398:	4fc50513          	addi	a0,a0,1276 # 80001890 <CSWTCH.3+0x60>
    8000039c:	9782                	jalr	a5
    8000039e:	0c800513          	li	a0,200
    800003a2:	00001097          	auipc	ra,0x1
    800003a6:	d82080e7          	jalr	-638(ra) # 80001124 <usleep>
            // Check if the Flash address is in range (512K ~ 8MB)
            if ((cfg_address >= MIN_APP_FLASH_ADDR) && (cfg_address <= MAX_APP_FLASH_ADDR)) {
    800003aa:	000ba583          	lw	a1,0(s7)
    800003ae:	fff807b7          	lui	a5,0xfff80
    800003b2:	00780737          	lui	a4,0x780
    800003b6:	9fad                	addw	a5,a5,a1
    800003b8:	1ef76f63          	bltu	a4,a5,800005b6 <main+0x5b2>
    800003bc:	000ca603          	lw	a2,0(s9)
                // Address valid, check if the size is in range (16K ~ 3MB)
                if ((cfg_size >= MIN_APP_FLASH_SIZE) && (cfg_size <= MAX_APP_FLASH_SIZE)) {
    800003c0:	77f1                	lui	a5,0xffffc
    800003c2:	002fc6b7          	lui	a3,0x2fc
    800003c6:	9fb1                	addw	a5,a5,a2
    800003c8:	00092703          	lw	a4,0(s2)
    800003cc:	3af6e063          	bltu	a3,a5,8000076c <main+0x768>
                    // Valid size
                    LOG("@ 0x%08X, size=%u, ", cfg_address, cfg_size);
    800003d0:	20070663          	beqz	a4,800005dc <main+0x5d8>
    800003d4:	609c                	ld	a5,0(s1)
    800003d6:	00001517          	auipc	a0,0x1
    800003da:	4d250513          	addi	a0,a0,1234 # 800018a8 <CSWTCH.3+0x78>
    800003de:	9782                	jalr	a5
    800003e0:	0c800513          	li	a0,200
    800003e4:	00001097          	auipc	ra,0x1
    800003e8:	d40080e7          	jalr	-704(ra) # 80001124 <usleep>
    800003ec:	00092703          	lw	a4,0(s2)
                    // If active application or in interactive mode, check the application
                    if ((cfg_magic & CFG_APP_FLAG_ACTIVE) || (boot_pin == 0)) {
    800003f0:	000c2683          	lw	a3,0(s8)
    800003f4:	0016f793          	andi	a5,a3,1
    800003f8:	12079e63          	bnez	a5,80000534 <main+0x530>
    800003fc:	00001797          	auipc	a5,0x1
    80000400:	71478793          	addi	a5,a5,1812 # 80001b10 <boot_pin>
    80000404:	439c                	lw	a5,0(a5)
    80000406:	12078763          	beqz	a5,80000534 <main+0x530>
                            LOG("SHA256 ok, ");
                        }
                        available_apps[i] = 1;
                    }
                    else {
                        LOG("not checked, ");
    8000040a:	c341                	beqz	a4,8000048a <main+0x486>
    8000040c:	609c                	ld	a5,0(s1)
    8000040e:	00001517          	auipc	a0,0x1
    80000412:	52a50513          	addi	a0,a0,1322 # 80001938 <CSWTCH.3+0x108>
    80000416:	9782                	jalr	a5
    80000418:	0c800513          	li	a0,200
    8000041c:	00001097          	auipc	ra,0x1
    80000420:	d08080e7          	jalr	-760(ra) # 80001124 <usleep>
                    }
                    // ** Check if this is an active config (bit #0 set)
                    if (cfg_magic & CFG_APP_FLAG_ACTIVE) {
    80000424:	000c2683          	lw	a3,0(s8)
    80000428:	00092783          	lw	a5,0(s2)
    8000042c:	8a85                	andi	a3,a3,1
    8000042e:	30068e63          	beqz	a3,8000074a <main+0x746>
                        LOG("ACTIVE");
    80000432:	36078063          	beqz	a5,80000792 <main+0x78e>
    80000436:	609c                	ld	a5,0(s1)
    80000438:	00001517          	auipc	a0,0x1
    8000043c:	51050513          	addi	a0,a0,1296 # 80001948 <CSWTCH.3+0x118>
    80000440:	9782                	jalr	a5
    80000442:	0c800513          	li	a0,200
    80000446:	00001097          	auipc	ra,0x1
    8000044a:	cde080e7          	jalr	-802(ra) # 80001124 <usleep>
                        if (app_flash_start == DEFAULT_APP_ADDR) {
    8000044e:	00001797          	auipc	a5,0x1
    80000452:	68a78793          	addi	a5,a5,1674 # 80001ad8 <app_flash_start>
    80000456:	4398                	lw	a4,0(a5)
    80000458:	000307b7          	lui	a5,0x30
    8000045c:	68f70963          	beq	a4,a5,80000aee <main+0xaea>
                            app_size = cfg_size;
                            app_flash_start = cfg_address;
                            LOG(" *");
                        }
                        LOG("\n");
    80000460:	00092783          	lw	a5,0(s2)
    80000464:	cf89                	beqz	a5,8000047e <main+0x47a>
    80000466:	609c                	ld	a5,0(s1)
    80000468:	00001517          	auipc	a0,0x1
    8000046c:	46850513          	addi	a0,a0,1128 # 800018d0 <CSWTCH.3+0xa0>
    80000470:	9782                	jalr	a5
    80000472:	0c800513          	li	a0,200
    80000476:	00001097          	auipc	ra,0x1
    8000047a:	cae080e7          	jalr	-850(ra) # 80001124 <usleep>
                        if (boot_pin > 0) {
    8000047e:	00001797          	auipc	a5,0x1
    80000482:	69278793          	addi	a5,a5,1682 # 80001b10 <boot_pin>
    80000486:	439c                	lw	a5,0(a5)
    80000488:	eb99                	bnez	a5,8000049e <main+0x49a>
    8000048a:	000aa583          	lw	a1,0(s5)
    for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    8000048e:	2585                	addiw	a1,a1,1
    80000490:	00002717          	auipc	a4,0x2
    80000494:	acb72823          	sw	a1,-1328(a4) # 80001f60 <i>
    80000498:	479d                	li	a5,7
    8000049a:	eeb7f1e3          	bleu	a1,a5,8000037c <main+0x378>
                LOG("wrong address\n");
            }
        }
    }

    if (app_flash_start == DEFAULT_APP_ADDR) {
    8000049e:	00001797          	auipc	a5,0x1
    800004a2:	63a78793          	addi	a5,a5,1594 # 80001ad8 <app_flash_start>
    800004a6:	4398                	lw	a4,0(a5)
    800004a8:	000307b7          	lui	a5,0x30
    800004ac:	54f71963          	bne	a4,a5,800009fe <main+0x9fa>
        if (cfg_offset == 0) {
    800004b0:	000a2703          	lw	a4,0(s4)
    800004b4:	00092783          	lw	a5,0(s2)
    800004b8:	70071c63          	bnez	a4,80000bd0 <main+0xbcc>
            // no valid entry found in main config sector
            LOG("\n* Find applications in BACKUP parameters\n");
    800004bc:	cf89                	beqz	a5,800004d6 <main+0x4d2>
    800004be:	609c                	ld	a5,0(s1)
    800004c0:	00001517          	auipc	a0,0x1
    800004c4:	4c850513          	addi	a0,a0,1224 # 80001988 <CSWTCH.3+0x158>
    800004c8:	9782                	jalr	a5
    800004ca:	0c800513          	li	a0,200
    800004ce:	00001097          	auipc	ra,0x1
    800004d2:	c56080e7          	jalr	-938(ra) # 80001124 <usleep>
            cfg_offset = 4096;
            if (boot_pin == 0) {
    800004d6:	00001797          	auipc	a5,0x1
    800004da:	63a78793          	addi	a5,a5,1594 # 80001b10 <boot_pin>
    800004de:	439c                	lw	a5,0(a5)
            cfg_offset = 4096;
    800004e0:	6705                	lui	a4,0x1
    800004e2:	00002697          	auipc	a3,0x2
    800004e6:	a4e6a923          	sw	a4,-1454(a3) # 80001f34 <cfg_offset>
            if (boot_pin == 0) {
    800004ea:	2a079263          	bnez	a5,8000078e <main+0x78a>
                cfg_magic = cfg_flash_ptr[4096+BOOT_CONFIG_ITEMS];
    800004ee:	540247b7          	lui	a5,0x54024
    800004f2:	5394                	lw	a3,32(a5)
    800004f4:	6785                	lui	a5,0x1
                boot_pin = (cfg_magic == MAGIC_ID) ? 1 : 0;
    800004f6:	41368733          	sub	a4,a3,s3
    800004fa:	00173713          	seqz	a4,a4
                cfg_magic = cfg_flash_ptr[4096+BOOT_CONFIG_ITEMS];
    800004fe:	00002617          	auipc	a2,0x2
    80000502:	a2d62923          	sw	a3,-1486(a2) # 80001f30 <cfg_magic>
                boot_pin = (cfg_magic == MAGIC_ID) ? 1 : 0;
    80000506:	00001697          	auipc	a3,0x1
    8000050a:	60e6a523          	sw	a4,1546(a3) # 80001b10 <boot_pin>
    8000050e:	b9b1                	j	8000016a <main+0x166>
            if ((cfg_address >= MIN_APP_FLASH_ADDR) && (cfg_address <= MAX_APP_FLASH_ADDR)) {
    80000510:	fff807b7          	lui	a5,0xfff80
    80000514:	011788bb          	addw	a7,a5,a7
    80000518:	007807b7          	lui	a5,0x780
    8000051c:	e517e8e3          	bltu	a5,a7,8000036c <main+0x368>
                if ((cfg_size >= MIN_APP_FLASH_SIZE) && (cfg_size <= MAX_APP_FLASH_SIZE)) {
    80000520:	77f1                	lui	a5,0xffffc
    80000522:	0067833b          	addw	t1,a5,t1
    80000526:	002fc7b7          	lui	a5,0x2fc
    8000052a:	ec67f3e3          	bleu	t1,a5,800003f0 <main+0x3ec>
    8000052e:	000aa583          	lw	a1,0(s5)
    80000532:	bfb1                	j	8000048e <main+0x48a>
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    80000534:	000ba783          	lw	a5,0(s7)
    uint32_t val = app_flash_ptr[addr];
    80000538:	540005b7          	lui	a1,0x54000
    if (cfg_size != sz) return 0;
    8000053c:	000ca883          	lw	a7,0(s9)
    val += app_flash_ptr[addr+1] << 8;
    80000540:	0027861b          	addiw	a2,a5,2
    val += app_flash_ptr[addr+2] << 16;
    80000544:	0037831b          	addiw	t1,a5,3
    val += app_flash_ptr[addr+1] << 8;
    80000548:	1602                	slli	a2,a2,0x20
    val += app_flash_ptr[addr+2] << 16;
    8000054a:	1302                	slli	t1,t1,0x20
    val += app_flash_ptr[addr+1] << 8;
    8000054c:	9201                	srli	a2,a2,0x20
    val += app_flash_ptr[addr+2] << 16;
    8000054e:	02035313          	srli	t1,t1,0x20
    uint32_t sz = flash2uint32(cfg_address+1);          // app size
    80000552:	0017851b          	addiw	a0,a5,1
    val += app_flash_ptr[addr+3] << 24;
    80000556:	00478e1b          	addiw	t3,a5,4
    val += app_flash_ptr[addr+1] << 8;
    8000055a:	962e                	add	a2,a2,a1
    val += app_flash_ptr[addr+2] << 16;
    8000055c:	932e                	add	t1,t1,a1
    uint32_t val = app_flash_ptr[addr];
    8000055e:	1502                	slli	a0,a0,0x20
    val += app_flash_ptr[addr+3] << 24;
    80000560:	1e02                	slli	t3,t3,0x20
    80000562:	020e5e13          	srli	t3,t3,0x20
    uint32_t val = app_flash_ptr[addr];
    80000566:	9101                	srli	a0,a0,0x20
    val += app_flash_ptr[addr+1] << 8;
    80000568:	00064603          	lbu	a2,0(a2)
    val += app_flash_ptr[addr+2] << 16;
    8000056c:	00034303          	lbu	t1,0(t1)
    uint32_t val = app_flash_ptr[addr];
    80000570:	952e                	add	a0,a0,a1
    val += app_flash_ptr[addr+3] << 24;
    80000572:	95f2                	add	a1,a1,t3
    80000574:	0005c583          	lbu	a1,0(a1) # 54000000 <_start-0x2c000000>
    uint32_t val = app_flash_ptr[addr];
    80000578:	00054e03          	lbu	t3,0(a0)
    val += app_flash_ptr[addr+1] << 8;
    8000057c:	0086161b          	slliw	a2,a2,0x8
    val += app_flash_ptr[addr+2] << 16;
    80000580:	0103151b          	slliw	a0,t1,0x10
    80000584:	9e29                	addw	a2,a2,a0
    80000586:	01c6063b          	addw	a2,a2,t3
    val += app_flash_ptr[addr+3] << 24;
    8000058a:	0185959b          	slliw	a1,a1,0x18
    if (cfg_size != sz) return 0;
    8000058e:	9e2d                	addw	a2,a2,a1
    80000590:	0cc88263          	beq	a7,a2,80000654 <main+0x650>
                            LOG("App CHECK failed\n");
    80000594:	ee070be3          	beqz	a4,8000048a <main+0x486>
    80000598:	609c                	ld	a5,0(s1)
    8000059a:	00001517          	auipc	a0,0x1
    8000059e:	32650513          	addi	a0,a0,806 # 800018c0 <CSWTCH.3+0x90>
    800005a2:	9782                	jalr	a5
    800005a4:	0c800513          	li	a0,200
    800005a8:	00001097          	auipc	ra,0x1
    800005ac:	b7c080e7          	jalr	-1156(ra) # 80001124 <usleep>
    800005b0:	000aa583          	lw	a1,0(s5)
    800005b4:	bb65                	j	8000036c <main+0x368>
                LOG("wrong address\n");
    800005b6:	00092783          	lw	a5,0(s2)
    800005ba:	ec0788e3          	beqz	a5,8000048a <main+0x486>
    800005be:	609c                	ld	a5,0(s1)
    800005c0:	00001517          	auipc	a0,0x1
    800005c4:	3b850513          	addi	a0,a0,952 # 80001978 <CSWTCH.3+0x148>
    800005c8:	9782                	jalr	a5
    800005ca:	0c800513          	li	a0,200
    800005ce:	00001097          	auipc	ra,0x1
    800005d2:	b56080e7          	jalr	-1194(ra) # 80001124 <usleep>
    800005d6:	000aa583          	lw	a1,0(s5)
    800005da:	bd55                	j	8000048e <main+0x48a>
                    if ((cfg_magic & CFG_APP_FLAG_ACTIVE) || (boot_pin == 0)) {
    800005dc:	000c2683          	lw	a3,0(s8)
    800005e0:	0016f793          	andi	a5,a3,1
    800005e4:	eb81                	bnez	a5,800005f4 <main+0x5f0>
    800005e6:	00001797          	auipc	a5,0x1
    800005ea:	52a78793          	addi	a5,a5,1322 # 80001b10 <boot_pin>
    800005ee:	439c                	lw	a5,0(a5)
    800005f0:	e8079de3          	bnez	a5,8000048a <main+0x486>
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    800005f4:	000ba783          	lw	a5,0(s7)
    uint32_t val = app_flash_ptr[addr];
    800005f8:	540005b7          	lui	a1,0x54000
    if (cfg_size != sz) return 0;
    800005fc:	000ca883          	lw	a7,0(s9)
    val += app_flash_ptr[addr+2] << 16;
    80000600:	0037861b          	addiw	a2,a5,3
    val += app_flash_ptr[addr+1] << 8;
    80000604:	0027831b          	addiw	t1,a5,2
    val += app_flash_ptr[addr+2] << 16;
    80000608:	1602                	slli	a2,a2,0x20
    val += app_flash_ptr[addr+1] << 8;
    8000060a:	1302                	slli	t1,t1,0x20
    val += app_flash_ptr[addr+2] << 16;
    8000060c:	9201                	srli	a2,a2,0x20
    val += app_flash_ptr[addr+1] << 8;
    8000060e:	02035313          	srli	t1,t1,0x20
    uint32_t sz = flash2uint32(cfg_address+1);          // app size
    80000612:	0017851b          	addiw	a0,a5,1
    val += app_flash_ptr[addr+3] << 24;
    80000616:	00478e1b          	addiw	t3,a5,4
    val += app_flash_ptr[addr+2] << 16;
    8000061a:	962e                	add	a2,a2,a1
    val += app_flash_ptr[addr+1] << 8;
    8000061c:	932e                	add	t1,t1,a1
    uint32_t val = app_flash_ptr[addr];
    8000061e:	1502                	slli	a0,a0,0x20
    val += app_flash_ptr[addr+3] << 24;
    80000620:	1e02                	slli	t3,t3,0x20
    80000622:	020e5e13          	srli	t3,t3,0x20
    uint32_t val = app_flash_ptr[addr];
    80000626:	9101                	srli	a0,a0,0x20
    val += app_flash_ptr[addr+2] << 16;
    80000628:	00064603          	lbu	a2,0(a2)
    val += app_flash_ptr[addr+1] << 8;
    8000062c:	00034303          	lbu	t1,0(t1)
    uint32_t val = app_flash_ptr[addr];
    80000630:	952e                	add	a0,a0,a1
    val += app_flash_ptr[addr+3] << 24;
    80000632:	95f2                	add	a1,a1,t3
    80000634:	0005c583          	lbu	a1,0(a1) # 54000000 <_start-0x2c000000>
    uint32_t val = app_flash_ptr[addr];
    80000638:	00054e03          	lbu	t3,0(a0)
    val += app_flash_ptr[addr+2] << 16;
    8000063c:	0106161b          	slliw	a2,a2,0x10
    val += app_flash_ptr[addr+1] << 8;
    80000640:	0083151b          	slliw	a0,t1,0x8
    val += app_flash_ptr[addr+2] << 16;
    80000644:	9e29                	addw	a2,a2,a0
    80000646:	01c6063b          	addw	a2,a2,t3
    val += app_flash_ptr[addr+3] << 24;
    8000064a:	0185959b          	slliw	a1,a1,0x18
    if (cfg_size != sz) return 0;
    8000064e:	9e2d                	addw	a2,a2,a1
    80000650:	e2c89de3          	bne	a7,a2,8000048a <main+0x486>
    val += app_flash_ptr[addr+2] << 16;
    80000654:	0097831b          	addiw	t1,a5,9
    val += app_flash_ptr[addr+3] << 24;
    80000658:	00a7889b          	addiw	a7,a5,10
    val += app_flash_ptr[addr+2] << 16;
    8000065c:	1302                	slli	t1,t1,0x20
    val += app_flash_ptr[addr+3] << 24;
    8000065e:	1882                	slli	a7,a7,0x20
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    80000660:	54000637          	lui	a2,0x54000
    val += app_flash_ptr[addr+2] << 16;
    80000664:	02035313          	srli	t1,t1,0x20
    val += app_flash_ptr[addr+3] << 24;
    80000668:	0208d893          	srli	a7,a7,0x20
    uint32_t app_id = flash2uint32(cfg_address+7);      // for app built with Standalone SDK
    8000066c:	0077851b          	addiw	a0,a5,7
    val += app_flash_ptr[addr+1] << 8;
    80000670:	0087859b          	addiw	a1,a5,8
    val += app_flash_ptr[addr+2] << 16;
    80000674:	9332                	add	t1,t1,a2
    val += app_flash_ptr[addr+3] << 24;
    80000676:	98b2                	add	a7,a7,a2
    uint32_t val = app_flash_ptr[addr];
    80000678:	1502                	slli	a0,a0,0x20
    val += app_flash_ptr[addr+1] << 8;
    8000067a:	1582                	slli	a1,a1,0x20
    val += app_flash_ptr[addr+2] << 16;
    8000067c:	00034303          	lbu	t1,0(t1)
    val += app_flash_ptr[addr+3] << 24;
    80000680:	0008c883          	lbu	a7,0(a7)
    uint32_t val = app_flash_ptr[addr];
    80000684:	9101                	srli	a0,a0,0x20
    val += app_flash_ptr[addr+1] << 8;
    80000686:	9181                	srli	a1,a1,0x20
    uint32_t val = app_flash_ptr[addr];
    80000688:	9532                	add	a0,a0,a2
    val += app_flash_ptr[addr+1] << 8;
    8000068a:	95b2                	add	a1,a1,a2
    uint32_t val = app_flash_ptr[addr];
    8000068c:	00054e83          	lbu	t4,0(a0)
    val += app_flash_ptr[addr+1] << 8;
    80000690:	0005c583          	lbu	a1,0(a1)
    val += app_flash_ptr[addr+3] << 24;
    80000694:	01889e1b          	slliw	t3,a7,0x18
    val += app_flash_ptr[addr+2] << 16;
    80000698:	0103151b          	slliw	a0,t1,0x10
    8000069c:	01c5053b          	addw	a0,a0,t3
    if (app_id != 0xdeadbeef) {
    800006a0:	6802                	ld	a6,0(sp)
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    800006a2:	02079e13          	slli	t3,a5,0x20
    800006a6:	01d5053b          	addw	a0,a0,t4
    800006aa:	020e5e13          	srli	t3,t3,0x20
    val += app_flash_ptr[addr+1] << 8;
    800006ae:	0085959b          	slliw	a1,a1,0x8
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    800006b2:	9e32                	add	t3,t3,a2
    if (app_id != 0xdeadbeef) {
    800006b4:	9da9                	addw	a1,a1,a0
    uint8_t  key = app_flash_ptr[cfg_address];          // must be 0, SHA256 key NOT specified
    800006b6:	000e4503          	lbu	a0,0(t3)
    if (app_id != 0xdeadbeef) {
    800006ba:	11058263          	beq	a1,a6,800007be <main+0x7ba>
    val += app_flash_ptr[addr+2] << 16;
    800006be:	00b7859b          	addiw	a1,a5,11
    val += app_flash_ptr[addr+3] << 24;
    800006c2:	00c78e1b          	addiw	t3,a5,12
    val += app_flash_ptr[addr+2] << 16;
    800006c6:	02059793          	slli	a5,a1,0x20
    val += app_flash_ptr[addr+3] << 24;
    800006ca:	020e1593          	slli	a1,t3,0x20
    val += app_flash_ptr[addr+2] << 16;
    800006ce:	9381                	srli	a5,a5,0x20
    val += app_flash_ptr[addr+3] << 24;
    800006d0:	9181                	srli	a1,a1,0x20
    val += app_flash_ptr[addr+2] << 16;
    800006d2:	97b2                	add	a5,a5,a2
    val += app_flash_ptr[addr+3] << 24;
    800006d4:	962e                	add	a2,a2,a1
    val += app_flash_ptr[addr+2] << 16;
    800006d6:	0007c783          	lbu	a5,0(a5)
    val += app_flash_ptr[addr+3] << 24;
    800006da:	00064603          	lbu	a2,0(a2) # 54000000 <_start-0x2c000000>
    if ((key != 0) || (app_id != 0xdeadbeef)) return 0;
    800006de:	ea051be3          	bnez	a0,80000594 <main+0x590>
    val += app_flash_ptr[addr+2] << 16;
    800006e2:	0107979b          	slliw	a5,a5,0x10
    val += app_flash_ptr[addr+3] << 24;
    800006e6:	0186161b          	slliw	a2,a2,0x18
    800006ea:	9fb1                	addw	a5,a5,a2
    800006ec:	006787bb          	addw	a5,a5,t1
    val += app_flash_ptr[addr+1] << 8;
    800006f0:	0088989b          	slliw	a7,a7,0x8
    if ((key != 0) || (app_id != 0xdeadbeef)) return 0;
    800006f4:	00f887bb          	addw	a5,a7,a5
    800006f8:	e9079ee3          	bne	a5,a6,80000594 <main+0x590>
                        LOG("App ok, ");
    800006fc:	cf19                	beqz	a4,8000071a <main+0x716>
    800006fe:	609c                	ld	a5,0(s1)
    80000700:	00001517          	auipc	a0,0x1
    80000704:	1d850513          	addi	a0,a0,472 # 800018d8 <CSWTCH.3+0xa8>
    80000708:	9782                	jalr	a5
    8000070a:	0c800513          	li	a0,200
    8000070e:	00001097          	auipc	ra,0x1
    80000712:	a16080e7          	jalr	-1514(ra) # 80001124 <usleep>
    80000716:	000c2683          	lw	a3,0(s8)
                        if (cfg_magic & CFG_APP_FLAG_CRC32) {
    8000071a:	0026f793          	andi	a5,a3,2
    8000071e:	1a079763          	bnez	a5,800008cc <main+0x8c8>
                        if (cfg_magic & CFG_APP_FLAG_SHA256) {
    80000722:	0046f793          	andi	a5,a3,4
    80000726:	efd1                	bnez	a5,800007c2 <main+0x7be>
                        available_apps[i] = 1;
    80000728:	00001717          	auipc	a4,0x1
    8000072c:	3e070713          	addi	a4,a4,992 # 80001b08 <available_apps>
    80000730:	00002797          	auipc	a5,0x2
    80000734:	8307e783          	lwu	a5,-2000(a5) # 80001f60 <i>
    80000738:	97ba                	add	a5,a5,a4
    8000073a:	4705                	li	a4,1
    8000073c:	00e78023          	sb	a4,0(a5)
                    if (cfg_magic & CFG_APP_FLAG_ACTIVE) {
    80000740:	8a85                	andi	a3,a3,1
    80000742:	00092783          	lw	a5,0(s2)
    80000746:	ce0696e3          	bnez	a3,80000432 <main+0x42e>
                        LOG("NOT active\n");
    8000074a:	d40780e3          	beqz	a5,8000048a <main+0x486>
    8000074e:	609c                	ld	a5,0(s1)
    80000750:	00001517          	auipc	a0,0x1
    80000754:	20850513          	addi	a0,a0,520 # 80001958 <CSWTCH.3+0x128>
    80000758:	9782                	jalr	a5
    8000075a:	0c800513          	li	a0,200
    8000075e:	00001097          	auipc	ra,0x1
    80000762:	9c6080e7          	jalr	-1594(ra) # 80001124 <usleep>
    80000766:	000aa583          	lw	a1,0(s5)
    8000076a:	b109                	j	8000036c <main+0x368>
                    LOG("wrong size\n");
    8000076c:	d0070fe3          	beqz	a4,8000048a <main+0x486>
    80000770:	609c                	ld	a5,0(s1)
    80000772:	00001517          	auipc	a0,0x1
    80000776:	1f650513          	addi	a0,a0,502 # 80001968 <CSWTCH.3+0x138>
    8000077a:	9782                	jalr	a5
    8000077c:	0c800513          	li	a0,200
    80000780:	00001097          	auipc	ra,0x1
    80000784:	9a4080e7          	jalr	-1628(ra) # 80001124 <usleep>
    80000788:	000aa583          	lw	a1,0(s5)
    8000078c:	b6c5                	j	8000036c <main+0x368>
    8000078e:	6785                	lui	a5,0x1
    80000790:	bae9                	j	8000016a <main+0x166>
                        if (app_flash_start == DEFAULT_APP_ADDR) {
    80000792:	00001797          	auipc	a5,0x1
    80000796:	34678793          	addi	a5,a5,838 # 80001ad8 <app_flash_start>
    8000079a:	4398                	lw	a4,0(a5)
    8000079c:	000307b7          	lui	a5,0x30
    800007a0:	ccf71fe3          	bne	a4,a5,8000047e <main+0x47a>
                            app_size = cfg_size;
    800007a4:	000ca703          	lw	a4,0(s9)
                            app_flash_start = cfg_address;
    800007a8:	000ba783          	lw	a5,0(s7)
                            app_size = cfg_size;
    800007ac:	00001697          	auipc	a3,0x1
    800007b0:	34e6aa23          	sw	a4,852(a3) # 80001b00 <app_size>
                            app_flash_start = cfg_address;
    800007b4:	00001717          	auipc	a4,0x1
    800007b8:	32f72223          	sw	a5,804(a4) # 80001ad8 <app_flash_start>
                            LOG(" *");
    800007bc:	b1c9                	j	8000047e <main+0x47a>
    if ((key != 0) || (app_id != 0xdeadbeef)) return 0;
    800007be:	dd1d                	beqz	a0,800006fc <main+0x6f8>
    800007c0:	bbd1                	j	80000594 <main+0x590>
    int size = cfg_size+5;
    800007c2:	000ca303          	lw	t1,0(s9)
    uint32_t idx = 0;
    800007c6:	4e81                	li	t4,0
    sha256_init(&context, size);
    800007c8:	856e                	mv	a0,s11
    int size = cfg_size+5;
    800007ca:	2315                	addiw	t1,t1,5
    sha256_init(&context, size);
    800007cc:	859a                	mv	a1,t1
    uint32_t idx = 0;
    800007ce:	e876                	sd	t4,16(sp)
    sha256_init(&context, size);
    800007d0:	e41a                	sd	t1,8(sp)
    800007d2:	00001097          	auipc	ra,0x1
    800007d6:	97c080e7          	jalr	-1668(ra) # 8000114e <sha256_init>
    while (size > 0) {
    800007da:	6322                	ld	t1,8(sp)
        sz = (size >= 1024) ? 1024 : size;
    800007dc:	40000f13          	li	t5,1024
            buffer[n] = app_flash_ptr[cfg_address + idx + n];
    800007e0:	540008b7          	lui	a7,0x54000
    while (size > 0) {
    800007e4:	6ec2                	ld	t4,16(sp)
    800007e6:	08605063          	blez	t1,80000866 <main+0x862>
        sz = (size >= 1024) ? 1024 : size;
    800007ea:	00030e1b          	sext.w	t3,t1
    800007ee:	006f5463          	ble	t1,t5,800007f6 <main+0x7f2>
    800007f2:	40000e13          	li	t3,1024
            buffer[n] = app_flash_ptr[cfg_address + idx + n];
    800007f6:	000ba683          	lw	a3,0(s7)
    800007fa:	fffe061b          	addiw	a2,t3,-1
    800007fe:	1602                	slli	a2,a2,0x20
    80000800:	9201                	srli	a2,a2,0x20
    80000802:	01d686bb          	addw	a3,a3,t4
        for (int n=0; n<sz; n++) {
    80000806:	00001797          	auipc	a5,0x1
    8000080a:	31378793          	addi	a5,a5,787 # 80001b19 <buffer+0x1>
            buffer[n] = app_flash_ptr[cfg_address + idx + n];
    8000080e:	00001717          	auipc	a4,0x1
    80000812:	30a70713          	addi	a4,a4,778 # 80001b18 <buffer>
    80000816:	963e                	add	a2,a2,a5
    80000818:	9e99                	subw	a3,a3,a4
    8000081a:	00e687bb          	addw	a5,a3,a4
    8000081e:	1782                	slli	a5,a5,0x20
    80000820:	9381                	srli	a5,a5,0x20
    80000822:	97c6                	add	a5,a5,a7
    80000824:	0007c783          	lbu	a5,0(a5)
    80000828:	0705                	addi	a4,a4,1
    8000082a:	fef70fa3          	sb	a5,-1(a4)
        for (int n=0; n<sz; n++) {
    8000082e:	fee616e3          	bne	a2,a4,8000081a <main+0x816>
        size -= sz;
    80000832:	41c3033b          	subw	t1,t1,t3
        sha256_update(&context, buffer, sz);
    80000836:	8672                	mv	a2,t3
    80000838:	00001597          	auipc	a1,0x1
    8000083c:	2e058593          	addi	a1,a1,736 # 80001b18 <buffer>
    80000840:	856e                	mv	a0,s11
    80000842:	ec76                	sd	t4,24(sp)
    80000844:	e872                	sd	t3,16(sp)
        size -= sz;
    80000846:	e41a                	sd	t1,8(sp)
        sha256_update(&context, buffer, sz);
    80000848:	00001097          	auipc	ra,0x1
    8000084c:	98e080e7          	jalr	-1650(ra) # 800011d6 <sha256_update>
        idx += sz;
    80000850:	6e42                	ld	t3,16(sp)
    80000852:	6ee2                	ld	t4,24(sp)
    while (size > 0) {
    80000854:	6322                	ld	t1,8(sp)
    80000856:	40000f13          	li	t5,1024
        idx += sz;
    8000085a:	01ce8ebb          	addw	t4,t4,t3
    while (size > 0) {
    8000085e:	540008b7          	lui	a7,0x54000
    80000862:	f86044e3          	bgtz	t1,800007ea <main+0x7e6>
    sha256_final(&context, hash);
    80000866:	00001597          	auipc	a1,0x1
    8000086a:	6da58593          	addi	a1,a1,1754 # 80001f40 <hash>
    8000086e:	856e                	mv	a0,s11
    80000870:	00001097          	auipc	ra,0x1
    80000874:	a08080e7          	jalr	-1528(ra) # 80001278 <sha256_final>
    for (idx=0; idx<SHA256_HASH_LEN; idx++) {
    80000878:	00001797          	auipc	a5,0x1
    8000087c:	6c878793          	addi	a5,a5,1736 # 80001f40 <hash>
    sha256_final(&context, hash);
    80000880:	00001717          	auipc	a4,0x1
    80000884:	26070713          	addi	a4,a4,608 # 80001ae0 <app_hash>
    80000888:	a039                	j	80000896 <main+0x892>
    for (idx=0; idx<SHA256_HASH_LEN; idx++) {
    8000088a:	00001697          	auipc	a3,0x1
    8000088e:	6d668693          	addi	a3,a3,1750 # 80001f60 <i>
    80000892:	14f68463          	beq	a3,a5,800009da <main+0x9d6>
        if (hash[idx] != app_hash[idx]) {
    80000896:	0007c603          	lbu	a2,0(a5)
    8000089a:	00074683          	lbu	a3,0(a4)
    8000089e:	0785                	addi	a5,a5,1
    800008a0:	0705                	addi	a4,a4,1
    800008a2:	fed604e3          	beq	a2,a3,8000088a <main+0x886>
                                LOG("SHA256 check failed\n");
    800008a6:	00092783          	lw	a5,0(s2)
    800008aa:	be0780e3          	beqz	a5,8000048a <main+0x486>
    800008ae:	609c                	ld	a5,0(s1)
    800008b0:	00001517          	auipc	a0,0x1
    800008b4:	06050513          	addi	a0,a0,96 # 80001910 <CSWTCH.3+0xe0>
    800008b8:	9782                	jalr	a5
    800008ba:	0c800513          	li	a0,200
    800008be:	00001097          	auipc	ra,0x1
    800008c2:	866080e7          	jalr	-1946(ra) # 80001124 <usleep>
    800008c6:	000aa583          	lw	a1,0(s5)
    800008ca:	b44d                	j	8000036c <main+0x368>
    for (uint32_t n = 5; n < (cfg_size+5); n++) {
    800008cc:	000ca703          	lw	a4,0(s9)
    800008d0:	4795                	li	a5,5
    800008d2:	0057061b          	addiw	a2,a4,5
    800008d6:	2ec7fb63          	bleu	a2,a5,80000bcc <main+0xbc8>
        byte = app_flash_ptr[cfg_address + n];
    800008da:	000ba603          	lw	a2,0(s7)
    uint32_t crc = 0xFFFFFFFF;
    800008de:	57fd                	li	a5,-1
        byte = app_flash_ptr[cfg_address + n];
    800008e0:	54000537          	lui	a0,0x54000
    800008e4:	9f31                	addw	a4,a4,a2
    800008e6:	0057059b          	addiw	a1,a4,5
    800008ea:	2615                	addiw	a2,a2,5
    800008ec:	02061713          	slli	a4,a2,0x20
    800008f0:	9301                	srli	a4,a4,0x20
    800008f2:	972a                	add	a4,a4,a0
    800008f4:	00074703          	lbu	a4,0(a4)
    800008f8:	2605                	addiw	a2,a2,1
        crc = crc ^ byte;
    800008fa:	8fb9                	xor	a5,a5,a4
            mask = -(crc & 1);
    800008fc:	0017f713          	andi	a4,a5,1
    80000900:	40e0073b          	negw	a4,a4
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000904:	01677733          	and	a4,a4,s6
    80000908:	0017d79b          	srliw	a5,a5,0x1
    8000090c:	8fb9                	xor	a5,a5,a4
    8000090e:	0007871b          	sext.w	a4,a5
            mask = -(crc & 1);
    80000912:	00177793          	andi	a5,a4,1
    80000916:	40f007bb          	negw	a5,a5
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    8000091a:	0017571b          	srliw	a4,a4,0x1
    8000091e:	0167f7b3          	and	a5,a5,s6
    80000922:	8fb9                	xor	a5,a5,a4
    80000924:	2781                	sext.w	a5,a5
            mask = -(crc & 1);
    80000926:	0017f713          	andi	a4,a5,1
    8000092a:	40e0073b          	negw	a4,a4
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    8000092e:	0017d79b          	srliw	a5,a5,0x1
    80000932:	01677733          	and	a4,a4,s6
    80000936:	8f3d                	xor	a4,a4,a5
    80000938:	2701                	sext.w	a4,a4
            mask = -(crc & 1);
    8000093a:	00177793          	andi	a5,a4,1
    8000093e:	40f007bb          	negw	a5,a5
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000942:	0017571b          	srliw	a4,a4,0x1
    80000946:	0167f7b3          	and	a5,a5,s6
    8000094a:	8fb9                	xor	a5,a5,a4
    8000094c:	2781                	sext.w	a5,a5
            mask = -(crc & 1);
    8000094e:	0017f713          	andi	a4,a5,1
    80000952:	40e0073b          	negw	a4,a4
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000956:	0017d79b          	srliw	a5,a5,0x1
    8000095a:	01677733          	and	a4,a4,s6
    8000095e:	8f3d                	xor	a4,a4,a5
    80000960:	2701                	sext.w	a4,a4
            mask = -(crc & 1);
    80000962:	00177793          	andi	a5,a4,1
    80000966:	40f007bb          	negw	a5,a5
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    8000096a:	0017571b          	srliw	a4,a4,0x1
    8000096e:	0167f7b3          	and	a5,a5,s6
    80000972:	8fb9                	xor	a5,a5,a4
    80000974:	2781                	sext.w	a5,a5
            mask = -(crc & 1);
    80000976:	0017f713          	andi	a4,a5,1
    8000097a:	40e0073b          	negw	a4,a4
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    8000097e:	0017d79b          	srliw	a5,a5,0x1
    80000982:	01677733          	and	a4,a4,s6
    80000986:	8f3d                	xor	a4,a4,a5
    80000988:	2701                	sext.w	a4,a4
            mask = -(crc & 1);
    8000098a:	00177793          	andi	a5,a4,1
    8000098e:	40f007bb          	negw	a5,a5
            crc = (crc >> 1) ^ (0xEDB88320 & mask);
    80000992:	0017571b          	srliw	a4,a4,0x1
    80000996:	0167f7b3          	and	a5,a5,s6
    8000099a:	8fb9                	xor	a5,a5,a4
    8000099c:	2781                	sext.w	a5,a5
    for (uint32_t n = 5; n < (cfg_size+5); n++) {
    8000099e:	f4c597e3          	bne	a1,a2,800008ec <main+0x8e8>
    if (crc32 != cfg_crc) return 0;
    800009a2:	00001717          	auipc	a4,0x1
    800009a6:	57a70713          	addi	a4,a4,1402 # 80001f1c <cfg_crc>
    800009aa:	4310                	lw	a2,0(a4)
    800009ac:	fff7c793          	not	a5,a5
    800009b0:	00092703          	lw	a4,0(s2)
    800009b4:	1ef60b63          	beq	a2,a5,80000baa <main+0xba6>
                                LOG("CRC32 check failed\n");
    800009b8:	ac0709e3          	beqz	a4,8000048a <main+0x486>
    800009bc:	609c                	ld	a5,0(s1)
    800009be:	00001517          	auipc	a0,0x1
    800009c2:	f2a50513          	addi	a0,a0,-214 # 800018e8 <CSWTCH.3+0xb8>
    800009c6:	9782                	jalr	a5
    800009c8:	0c800513          	li	a0,200
    800009cc:	00000097          	auipc	ra,0x0
    800009d0:	758080e7          	jalr	1880(ra) # 80001124 <usleep>
    800009d4:	000aa583          	lw	a1,0(s5)
    800009d8:	ba51                	j	8000036c <main+0x368>
                            LOG("SHA256 ok, ");
    800009da:	00092783          	lw	a5,0(s2)
    800009de:	cf89                	beqz	a5,800009f8 <main+0x9f4>
    800009e0:	609c                	ld	a5,0(s1)
    800009e2:	00001517          	auipc	a0,0x1
    800009e6:	f4650513          	addi	a0,a0,-186 # 80001928 <CSWTCH.3+0xf8>
    800009ea:	9782                	jalr	a5
    800009ec:	0c800513          	li	a0,200
    800009f0:	00000097          	auipc	ra,0x0
    800009f4:	734080e7          	jalr	1844(ra) # 80001124 <usleep>
    800009f8:	000c2683          	lw	a3,0(s8)
    800009fc:	b335                	j	80000728 <main+0x724>
            // No valid application found
            LOG("\n* No app found, loading default\n");
            app_size = flash2uint32(DEFAULT_APP_ADDR+1);
        }
    }
    else if (boot_pin == 0) {
    800009fe:	00001797          	auipc	a5,0x1
    80000a02:	11278793          	addi	a5,a5,274 # 80001b10 <boot_pin>
    80000a06:	439c                	lw	a5,0(a5)
    80000a08:	20078963          	beqz	a5,80000c1a <main+0xc16>
            LOG("%c\n\n", (char)char_in);
        }
    }

    // === Copy application code from flash to SRAM ===
    LOG("* Loading app from flash at 0x%08X (%u B)\n", app_flash_start, app_size);
    80000a0c:	00092783          	lw	a5,0(s2)
    80000a10:	00001417          	auipc	s0,0x1
    80000a14:	0f040413          	addi	s0,s0,240 # 80001b00 <app_size>
    80000a18:	c39d                	beqz	a5,80000a3e <main+0xa3a>
    80000a1a:	00001717          	auipc	a4,0x1
    80000a1e:	0be70713          	addi	a4,a4,190 # 80001ad8 <app_flash_start>
    80000a22:	609c                	ld	a5,0(s1)
    80000a24:	4010                	lw	a2,0(s0)
    80000a26:	430c                	lw	a1,0(a4)
    80000a28:	00001517          	auipc	a0,0x1
    80000a2c:	01050513          	addi	a0,a0,16 # 80001a38 <CSWTCH.3+0x208>
    80000a30:	9782                	jalr	a5
    80000a32:	0c800513          	li	a0,200
    80000a36:	00000097          	auipc	ra,0x0
    80000a3a:	6ee080e7          	jalr	1774(ra) # 80001124 <usleep>

    app_size += 37;
    80000a3e:	4018                	lw	a4,0(s0)
    for (i = 5; i < app_size; i++) {
    80000a40:	4795                	li	a5,5
    80000a42:	00001697          	auipc	a3,0x1
    80000a46:	50f6af23          	sw	a5,1310(a3) # 80001f60 <i>
    app_size += 37;
    80000a4a:	0257069b          	addiw	a3,a4,37
    80000a4e:	00001797          	auipc	a5,0x1
    80000a52:	0ad7a923          	sw	a3,178(a5) # 80001b00 <app_size>
    for (i = 5; i < app_size; i++) {
    80000a56:	4795                	li	a5,5
    app_size += 37;
    80000a58:	8636                	mv	a2,a3
    for (i = 5; i < app_size; i++) {
    80000a5a:	04d7f663          	bleu	a3,a5,80000aa6 <main+0xaa2>
        app_sram_ptr[i-5] = app_flash_ptr[app_flash_start+i];
    80000a5e:	00001797          	auipc	a5,0x1
    80000a62:	07a78793          	addi	a5,a5,122 # 80001ad8 <app_flash_start>
    80000a66:	438c                	lw	a1,0(a5)
    80000a68:	277d                	addiw	a4,a4,31
    80000a6a:	400017b7          	lui	a5,0x40001
    80000a6e:	0786                	slli	a5,a5,0x1
    80000a70:	1702                	slli	a4,a4,0x20
    80000a72:	00178693          	addi	a3,a5,1 # 40001001 <_start-0x3fffefff>
    80000a76:	9301                	srli	a4,a4,0x20
    80000a78:	9736                	add	a4,a4,a3
    80000a7a:	7fffe6b7          	lui	a3,0x7fffe
    80000a7e:	2695                	addiw	a3,a3,5
    80000a80:	9db5                	addw	a1,a1,a3
    80000a82:	54000537          	lui	a0,0x54000
    80000a86:	00f586bb          	addw	a3,a1,a5
    80000a8a:	1682                	slli	a3,a3,0x20
    80000a8c:	9281                	srli	a3,a3,0x20
    80000a8e:	96aa                	add	a3,a3,a0
    80000a90:	0006c683          	lbu	a3,0(a3) # 7fffe000 <_start-0x2000>
    80000a94:	0785                	addi	a5,a5,1
    80000a96:	fed78fa3          	sb	a3,-1(a5)
    for (i = 5; i < app_size; i++) {
    80000a9a:	fef716e3          	bne	a4,a5,80000a86 <main+0xa82>
    80000a9e:	00001797          	auipc	a5,0x1
    80000aa2:	4cc7a123          	sw	a2,1218(a5) # 80001f60 <i>
    }

    // === Start the application ===
    // Disable XIP mode
    sysctl->peri.spi3_xip_en = 0;
    80000aa6:	504406b7          	lui	a3,0x50440
    80000aaa:	4ebc                	lw	a5,88(a3)
    80000aac:	7761                	lui	a4,0xffff8
    80000aae:	177d                	addi	a4,a4,-1
    80000ab0:	8ff9                	and	a5,a5,a4
    80000ab2:	cebc                	sw	a5,88(a3)

    LOG("* Starting ...\n\n", app_start);
    80000ab4:	00092783          	lw	a5,0(s2)
    80000ab8:	c385                	beqz	a5,80000ad8 <main+0xad4>
    80000aba:	609c                	ld	a5,0(s1)
    80000abc:	400015b7          	lui	a1,0x40001
    80000ac0:	0586                	slli	a1,a1,0x1
    80000ac2:	00001517          	auipc	a0,0x1
    80000ac6:	fa650513          	addi	a0,a0,-90 # 80001a68 <CSWTCH.3+0x238>
    80000aca:	9782                	jalr	a5
    80000acc:	0c800513          	li	a0,200
    80000ad0:	00000097          	auipc	ra,0x0
    80000ad4:	654080e7          	jalr	1620(ra) # 80001124 <usleep>
    usleep(1000);
    80000ad8:	3e800513          	li	a0,1000
    80000adc:	00000097          	auipc	ra,0x0
    80000ae0:	648080e7          	jalr	1608(ra) # 80001124 <usleep>

    // === Jump to the application start address ===
    asm ("jr %0" : : "r"(app_start));
    80000ae4:	400017b7          	lui	a5,0x40001
    80000ae8:	0786                	slli	a5,a5,0x1
    80000aea:	8782                	jr	a5

    // This should newer be reached!
    while (1)
        ;
    80000aec:	a001                	j	80000aec <main+0xae8>
                            app_size = cfg_size;
    80000aee:	000ca683          	lw	a3,0(s9)
                            app_flash_start = cfg_address;
    80000af2:	000ba703          	lw	a4,0(s7)
    80000af6:	00092783          	lw	a5,0(s2)
                            app_size = cfg_size;
    80000afa:	00001617          	auipc	a2,0x1
    80000afe:	00d62323          	sw	a3,6(a2) # 80001b00 <app_size>
                            app_flash_start = cfg_address;
    80000b02:	00001697          	auipc	a3,0x1
    80000b06:	fce6ab23          	sw	a4,-42(a3) # 80001ad8 <app_flash_start>
                            LOG(" *");
    80000b0a:	96078ae3          	beqz	a5,8000047e <main+0x47a>
    80000b0e:	609c                	ld	a5,0(s1)
    80000b10:	00001517          	auipc	a0,0x1
    80000b14:	e4050513          	addi	a0,a0,-448 # 80001950 <CSWTCH.3+0x120>
    80000b18:	9782                	jalr	a5
    80000b1a:	0c800513          	li	a0,200
    80000b1e:	00000097          	auipc	ra,0x0
    80000b22:	606080e7          	jalr	1542(ra) # 80001124 <usleep>
    80000b26:	ba2d                	j	80000460 <main+0x45c>
        fpioa_set_function(BOOT_PIN, FUNC_GPIOHS2);
    80000b28:	45e9                	li	a1,26
    80000b2a:	4549                	li	a0,18
    80000b2c:	00000097          	auipc	ra,0x0
    80000b30:	450080e7          	jalr	1104(ra) # 80000f7c <fpioa_set_function>
        gpiohs_set_drive_mode(GPIO_KEY, GPIO_DM_INPUT_PULL_UP);
    80000b34:	4589                	li	a1,2
    80000b36:	4509                	li	a0,2
    80000b38:	00000097          	auipc	ra,0x0
    80000b3c:	54a080e7          	jalr	1354(ra) # 80001082 <gpiohs_set_drive_mode>
        usleep(1000);
    80000b40:	3e800513          	li	a0,1000
    80000b44:	00000097          	auipc	ra,0x0
    80000b48:	5e0080e7          	jalr	1504(ra) # 80001124 <usleep>
        boot_pin = gpiohs_get_pin(GPIO_KEY);
    80000b4c:	4509                	li	a0,2
    80000b4e:	00000097          	auipc	ra,0x0
    80000b52:	5c8080e7          	jalr	1480(ra) # 80001116 <gpiohs_get_pin>
    LOG("\nK210 bootloader by LoBo v.1.2\n\n");
    80000b56:	00092783          	lw	a5,0(s2)
        boot_pin = gpiohs_get_pin(GPIO_KEY);
    80000b5a:	00001717          	auipc	a4,0x1
    80000b5e:	faa72b23          	sw	a0,-74(a4) # 80001b10 <boot_pin>
    LOG("\nK210 bootloader by LoBo v.1.2\n\n");
    80000b62:	00001497          	auipc	s1,0x1
    80000b66:	4264b483          	ld	s1,1062(s1) # 80001f88 <__TMC_END__+0x8>
    80000b6a:	d8078863          	beqz	a5,800000fa <main+0xf6>
    80000b6e:	609c                	ld	a5,0(s1)
    80000b70:	00001517          	auipc	a0,0x1
    80000b74:	cd050513          	addi	a0,a0,-816 # 80001840 <CSWTCH.3+0x10>
    80000b78:	9782                	jalr	a5
    80000b7a:	0c800513          	li	a0,200
    80000b7e:	00000097          	auipc	ra,0x0
    80000b82:	5a6080e7          	jalr	1446(ra) # 80001124 <usleep>
    LOG("* Find applications in MAIN parameters\n");
    80000b86:	00092783          	lw	a5,0(s2)
    80000b8a:	d6078863          	beqz	a5,800000fa <main+0xf6>
    80000b8e:	609c                	ld	a5,0(s1)
    80000b90:	00001517          	auipc	a0,0x1
    80000b94:	cd850513          	addi	a0,a0,-808 # 80001868 <CSWTCH.3+0x38>
    80000b98:	9782                	jalr	a5
    80000b9a:	0c800513          	li	a0,200
    80000b9e:	00000097          	auipc	ra,0x0
    80000ba2:	586080e7          	jalr	1414(ra) # 80001124 <usleep>
    80000ba6:	d54ff06f          	j	800000fa <main+0xf6>
                            LOG("CRC32 ok, ");
    80000baa:	b6070ce3          	beqz	a4,80000722 <main+0x71e>
    80000bae:	609c                	ld	a5,0(s1)
    80000bb0:	00001517          	auipc	a0,0x1
    80000bb4:	d5050513          	addi	a0,a0,-688 # 80001900 <CSWTCH.3+0xd0>
    80000bb8:	9782                	jalr	a5
    80000bba:	0c800513          	li	a0,200
    80000bbe:	00000097          	auipc	ra,0x0
    80000bc2:	566080e7          	jalr	1382(ra) # 80001124 <usleep>
    80000bc6:	000c2683          	lw	a3,0(s8)
    80000bca:	bea1                	j	80000722 <main+0x71e>
    uint32_t crc = 0xFFFFFFFF;
    80000bcc:	57fd                	li	a5,-1
    80000bce:	bbd1                	j	800009a2 <main+0x99e>
            LOG("\n* No app found, loading default\n");
    80000bd0:	cf89                	beqz	a5,80000bea <main+0xbe6>
    80000bd2:	609c                	ld	a5,0(s1)
    80000bd4:	00001517          	auipc	a0,0x1
    80000bd8:	de450513          	addi	a0,a0,-540 # 800019b8 <CSWTCH.3+0x188>
    80000bdc:	9782                	jalr	a5
    80000bde:	0c800513          	li	a0,200
    80000be2:	00000097          	auipc	ra,0x0
    80000be6:	542080e7          	jalr	1346(ra) # 80001124 <usleep>
    uint32_t val = app_flash_ptr[addr];
    80000bea:	54030737          	lui	a4,0x54030
    val += app_flash_ptr[addr+1] << 8;
    80000bee:	00274783          	lbu	a5,2(a4) # 54030002 <_start-0x2bfcfffe>
    val += app_flash_ptr[addr+2] << 16;
    80000bf2:	00374683          	lbu	a3,3(a4)
    uint32_t val = app_flash_ptr[addr];
    80000bf6:	00174603          	lbu	a2,1(a4)
    val += app_flash_ptr[addr+3] << 24;
    80000bfa:	00474703          	lbu	a4,4(a4)
    val += app_flash_ptr[addr+1] << 8;
    80000bfe:	0087979b          	slliw	a5,a5,0x8
    val += app_flash_ptr[addr+2] << 16;
    80000c02:	0106969b          	slliw	a3,a3,0x10
    80000c06:	9fb5                	addw	a5,a5,a3
    val += app_flash_ptr[addr+3] << 24;
    80000c08:	0187171b          	slliw	a4,a4,0x18
    val += app_flash_ptr[addr+2] << 16;
    80000c0c:	9fb1                	addw	a5,a5,a2
    val += app_flash_ptr[addr+3] << 24;
    80000c0e:	9fb9                	addw	a5,a5,a4
            app_size = flash2uint32(DEFAULT_APP_ADDR+1);
    80000c10:	00001717          	auipc	a4,0x1
    80000c14:	eef72823          	sw	a5,-272(a4) # 80001b00 <app_size>
    80000c18:	bbd5                	j	80000a0c <main+0xa08>
        boot_pin = gpiohs_get_pin(GPIO_KEY);
    80000c1a:	4509                	li	a0,2
    80000c1c:	00000097          	auipc	ra,0x0
    80000c20:	4fa080e7          	jalr	1274(ra) # 80001116 <gpiohs_get_pin>
    80000c24:	0005099b          	sext.w	s3,a0
    80000c28:	00001797          	auipc	a5,0x1
    80000c2c:	ef37a423          	sw	s3,-280(a5) # 80001b10 <boot_pin>
        if (boot_pin == 0) {
    80000c30:	dc099ee3          	bnez	s3,80000a0c <main+0xa08>
            LOG("\nSelect the application number to load [");
    80000c34:	00092783          	lw	a5,0(s2)
    80000c38:	22079563          	bnez	a5,80000e62 <main+0xe5e>
            for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    80000c3c:	00001797          	auipc	a5,0x1
    80000c40:	3207a223          	sw	zero,804(a5) # 80001f60 <i>
                    LOG(" %u,", i);
    80000c44:	00001b97          	auipc	s7,0x1
    80000c48:	dccb8b93          	addi	s7,s7,-564 # 80001a10 <CSWTCH.3+0x1e0>
            for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    80000c4c:	4b1d                	li	s6,7
                if (available_apps[i]) {
    80000c4e:	02099793          	slli	a5,s3,0x20
    80000c52:	9381                	srli	a5,a5,0x20
    80000c54:	00001717          	auipc	a4,0x1
    80000c58:	eb470713          	addi	a4,a4,-332 # 80001b08 <available_apps>
    80000c5c:	97ba                	add	a5,a5,a4
    80000c5e:	0007c783          	lbu	a5,0(a5)
    80000c62:	cf91                	beqz	a5,80000c7e <main+0xc7a>
                    LOG(" %u,", i);
    80000c64:	00092783          	lw	a5,0(s2)
    80000c68:	85ce                	mv	a1,s3
    80000c6a:	855e                	mv	a0,s7
    80000c6c:	cb89                	beqz	a5,80000c7e <main+0xc7a>
    80000c6e:	609c                	ld	a5,0(s1)
    80000c70:	9782                	jalr	a5
    80000c72:	0c800513          	li	a0,200
    80000c76:	00000097          	auipc	ra,0x0
    80000c7a:	4ae080e7          	jalr	1198(ra) # 80001124 <usleep>
            for (i = 0; i < BOOT_CONFIG_ITEMS; i++) {
    80000c7e:	000aa783          	lw	a5,0(s5)
    80000c82:	0017899b          	addiw	s3,a5,1
    80000c86:	00001717          	auipc	a4,0x1
    80000c8a:	2d372d23          	sw	s3,730(a4) # 80001f60 <i>
    80000c8e:	fd3b70e3          	bleu	s3,s6,80000c4e <main+0xc4a>
            LOG(" d=default ] ? ");
    80000c92:	00092783          	lw	a5,0(s2)
    80000c96:	1a079963          	bnez	a5,80000e48 <main+0xe44>
    80000c9a:	00001b97          	auipc	s7,0x1
    80000c9e:	2febbb83          	ld	s7,766(s7) # 80001f98 <__TMC_END__+0x18>
                if ((char_in == 'd') || (char_in == 'D')) {
    80000ca2:	04400b13          	li	s6,68
                    if ((char_in >= 0) && (char_in < BOOT_CONFIG_ITEMS)) {
    80000ca6:	4a9d                	li	s5,7
                    LOG("%c? ", char_in);
    80000ca8:	00001997          	auipc	s3,0x1
    80000cac:	d8098993          	addi	s3,s3,-640 # 80001a28 <CSWTCH.3+0x1f8>
    80000cb0:	a00d                	j	80000cd2 <main+0xcce>
                    char_in -= 0x30;
    80000cb2:	00001797          	auipc	a5,0x1
    80000cb6:	28a7a523          	sw	a0,650(a5) # 80001f3c <char_in>
                    if ((char_in >= 0) && (char_in < BOOT_CONFIG_ITEMS)) {
    80000cba:	00aae563          	bltu	s5,a0,80000cc4 <main+0xcc0>
                        if (available_apps[char_in]) {
    80000cbe:	0006c783          	lbu	a5,0(a3)
    80000cc2:	ebd9                	bnez	a5,80000d58 <main+0xd54>
                    LOG("%c? ", char_in);
    80000cc4:	00092783          	lw	a5,0(s2)
                    char_in += 0x30;
    80000cc8:	00001717          	auipc	a4,0x1
    80000ccc:	26b72a23          	sw	a1,628(a4) # 80001f3c <char_in>
                    LOG("%c? ", char_in);
    80000cd0:	ebb5                	bnez	a5,80000d44 <main+0xd40>
                char_in = rom_getchar();
    80000cd2:	000bb783          	ld	a5,0(s7)
    80000cd6:	9782                	jalr	a5
    80000cd8:	85aa                	mv	a1,a0
                if ((char_in == 'd') || (char_in == 'D')) {
    80000cda:	fdf57793          	andi	a5,a0,-33
                char_in = rom_getchar();
    80000cde:	00001697          	auipc	a3,0x1
    80000ce2:	24b6af23          	sw	a1,606(a3) # 80001f3c <char_in>
                    char_in -= 0x30;
    80000ce6:	fd05051b          	addiw	a0,a0,-48
                        if (available_apps[char_in]) {
    80000cea:	00001697          	auipc	a3,0x1
    80000cee:	e1e68693          	addi	a3,a3,-482 # 80001b08 <available_apps>
                if ((char_in == 'd') || (char_in == 'D')) {
    80000cf2:	2781                	sext.w	a5,a5
                        if (available_apps[char_in]) {
    80000cf4:	96aa                	add	a3,a3,a0
                if ((char_in == 'd') || (char_in == 'D')) {
    80000cf6:	fb679ee3          	bne	a5,s6,80000cb2 <main+0xcae>
                    app_size = APP_SIZE;
    80000cfa:	000507b7          	lui	a5,0x50
    80000cfe:	00001717          	auipc	a4,0x1
    80000d02:	e0f72123          	sw	a5,-510(a4) # 80001b00 <app_size>
                    app_flash_start = DEFAULT_APP_ADDR;
    80000d06:	000307b7          	lui	a5,0x30
    80000d0a:	00001717          	auipc	a4,0x1
    80000d0e:	dcf72723          	sw	a5,-562(a4) # 80001ad8 <app_flash_start>
            LOG("%c\n\n", (char)char_in);
    80000d12:	00092783          	lw	a5,0(s2)
    80000d16:	00001417          	auipc	s0,0x1
    80000d1a:	dea40413          	addi	s0,s0,-534 # 80001b00 <app_size>
    80000d1e:	d20780e3          	beqz	a5,80000a3e <main+0xa3a>
    80000d22:	609c                	ld	a5,0(s1)
    80000d24:	00001597          	auipc	a1,0x1
    80000d28:	2185c583          	lbu	a1,536(a1) # 80001f3c <char_in>
    80000d2c:	00001517          	auipc	a0,0x1
    80000d30:	d0450513          	addi	a0,a0,-764 # 80001a30 <CSWTCH.3+0x200>
    80000d34:	9782                	jalr	a5
    80000d36:	0c800513          	li	a0,200
    80000d3a:	00000097          	auipc	ra,0x0
    80000d3e:	3ea080e7          	jalr	1002(ra) # 80001124 <usleep>
    80000d42:	b1e9                	j	80000a0c <main+0xa08>
                    LOG("%c? ", char_in);
    80000d44:	609c                	ld	a5,0(s1)
    80000d46:	854e                	mv	a0,s3
    80000d48:	9782                	jalr	a5
    80000d4a:	0c800513          	li	a0,200
    80000d4e:	00000097          	auipc	ra,0x0
    80000d52:	3d6080e7          	jalr	982(ra) # 80001124 <usleep>
    80000d56:	bfb5                	j	80000cd2 <main+0xcce>
    offset = (i*8) + (cfg_offset / 4); // 32bit offset
    80000d58:	000a2603          	lw	a2,0(s4)
    80000d5c:	0035179b          	slliw	a5,a0,0x3
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d60:	54020837          	lui	a6,0x54020
    offset = (i*8) + (cfg_offset / 4); // 32bit offset
    80000d64:	0026571b          	srliw	a4,a2,0x2
    80000d68:	9fb9                	addw	a5,a5,a4
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d6a:	0017869b          	addiw	a3,a5,1
    cfg_size = cfg_flash_ptr[offset + 2];
    80000d6e:	0027871b          	addiw	a4,a5,2
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000d72:	0037889b          	addiw	a7,a5,3
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d76:	1682                	slli	a3,a3,0x20
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d78:	1782                	slli	a5,a5,0x20
    cfg_size = cfg_flash_ptr[offset + 2];
    80000d7a:	1702                	slli	a4,a4,0x20
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000d7c:	1882                	slli	a7,a7,0x20
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d7e:	9381                	srli	a5,a5,0x20
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d80:	9281                	srli	a3,a3,0x20
    cfg_size = cfg_flash_ptr[offset + 2];
    80000d82:	9301                	srli	a4,a4,0x20
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000d84:	0208d893          	srli	a7,a7,0x20
    80000d88:	088a                	slli	a7,a7,0x2
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d8a:	078a                	slli	a5,a5,0x2
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d8c:	068a                	slli	a3,a3,0x2
    cfg_size = cfg_flash_ptr[offset + 2];
    80000d8e:	070a                	slli	a4,a4,0x2
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d90:	96c2                	add	a3,a3,a6
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d92:	97c2                	add	a5,a5,a6
    cfg_size = cfg_flash_ptr[offset + 2];
    80000d94:	9742                	add	a4,a4,a6
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000d96:	9846                	add	a6,a6,a7
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000d98:	0007ae03          	lw	t3,0(a5) # 30000 <_start-0x7ffd0000>
    cfg_address = cfg_flash_ptr[offset + 1];
    80000d9c:	0006a883          	lw	a7,0(a3)
    cfg_size = cfg_flash_ptr[offset + 2];
    80000da0:	00072303          	lw	t1,0(a4)
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000da4:	00082703          	lw	a4,0(a6) # 54020000 <_start-0x2bfe0000>
    offset = (i*32) + cfg_offset + 0x10; // 8bit offset
    80000da8:	0106079b          	addiw	a5,a2,16
    80000dac:	0055151b          	slliw	a0,a0,0x5
    cfg_crc = cfg_flash_ptr[offset + 3];
    80000db0:	00001697          	auipc	a3,0x1
    80000db4:	16e6a623          	sw	a4,364(a3) # 80001f1c <cfg_crc>
    offset = (i*32) + cfg_offset + 0x10; // 8bit offset
    80000db8:	9fa9                	addw	a5,a5,a0
    cfg_magic = cfg_flash_ptr[offset + 0];
    80000dba:	00001697          	auipc	a3,0x1
    80000dbe:	17c6ab23          	sw	t3,374(a3) # 80001f30 <cfg_magic>
    cfg_address = cfg_flash_ptr[offset + 1];
    80000dc2:	00001697          	auipc	a3,0x1
    80000dc6:	1516ab23          	sw	a7,342(a3) # 80001f18 <cfg_address>
    cfg_size = cfg_flash_ptr[offset + 2];
    80000dca:	00001697          	auipc	a3,0x1
    80000dce:	1666a723          	sw	t1,366(a3) # 80001f38 <cfg_size>
    offset = (i*32) + cfg_offset + 0x10; // 8bit offset
    80000dd2:	4701                	li	a4,0
    80000dd4:	00001817          	auipc	a6,0x1
    80000dd8:	14c80813          	addi	a6,a6,332 # 80001f20 <cfg_info>
        cfg_info[n] = cfg_flash_bptr[offset + n];
    80000ddc:	54020537          	lui	a0,0x54020
    for (int n=0; n<16; n++) {
    80000de0:	4641                	li	a2,16
        cfg_info[n] = cfg_flash_bptr[offset + n];
    80000de2:	00f706bb          	addw	a3,a4,a5
    80000de6:	1682                	slli	a3,a3,0x20
    80000de8:	9281                	srli	a3,a3,0x20
    80000dea:	96aa                	add	a3,a3,a0
    80000dec:	0006ce03          	lbu	t3,0(a3)
    80000df0:	00e806b3          	add	a3,a6,a4
    80000df4:	0705                	addi	a4,a4,1
    80000df6:	01c68023          	sb	t3,0(a3)
    for (int n=0; n<16; n++) {
    80000dfa:	fec714e3          	bne	a4,a2,80000de2 <main+0xdde>
    offset = cfg_address + cfg_size + 5;
    80000dfe:	006887bb          	addw	a5,a7,t1
    cfg_info[15] = 0;
    80000e02:	00001717          	auipc	a4,0x1
    80000e06:	120706a3          	sb	zero,301(a4) # 80001f2f <cfg_info+0xf>
    offset = cfg_address + cfg_size + 5;
    80000e0a:	0057871b          	addiw	a4,a5,5
        app_hash[n] = app_flash_ptr[offset + n];
    80000e0e:	54000637          	lui	a2,0x54000
    80000e12:	0257879b          	addiw	a5,a5,37
    80000e16:	02071693          	slli	a3,a4,0x20
    80000e1a:	9281                	srli	a3,a3,0x20
    80000e1c:	96b2                	add	a3,a3,a2
    80000e1e:	0006c683          	lbu	a3,0(a3)
    80000e22:	0405                	addi	s0,s0,1
    80000e24:	2705                	addiw	a4,a4,1
    80000e26:	fed40fa3          	sb	a3,-1(s0)
    for (int n=0; n<SHA256_HASH_LEN; n++) {
    80000e2a:	fee796e3          	bne	a5,a4,80000e16 <main+0xe12>
                            app_size = cfg_size;
    80000e2e:	00001797          	auipc	a5,0x1
    80000e32:	cc67a923          	sw	t1,-814(a5) # 80001b00 <app_size>
                            app_flash_start = cfg_address;
    80000e36:	00001797          	auipc	a5,0x1
    80000e3a:	cb17a123          	sw	a7,-862(a5) # 80001ad8 <app_flash_start>
                            char_in += 0x30;
    80000e3e:	00001797          	auipc	a5,0x1
    80000e42:	0eb7af23          	sw	a1,254(a5) # 80001f3c <char_in>
                            break;
    80000e46:	b5f1                	j	80000d12 <main+0xd0e>
            LOG(" d=default ] ? ");
    80000e48:	609c                	ld	a5,0(s1)
    80000e4a:	00001517          	auipc	a0,0x1
    80000e4e:	bce50513          	addi	a0,a0,-1074 # 80001a18 <CSWTCH.3+0x1e8>
    80000e52:	9782                	jalr	a5
    80000e54:	0c800513          	li	a0,200
    80000e58:	00000097          	auipc	ra,0x0
    80000e5c:	2cc080e7          	jalr	716(ra) # 80001124 <usleep>
    80000e60:	bd2d                	j	80000c9a <main+0xc96>
            LOG("\nSelect the application number to load [");
    80000e62:	609c                	ld	a5,0(s1)
    80000e64:	00001517          	auipc	a0,0x1
    80000e68:	b7c50513          	addi	a0,a0,-1156 # 800019e0 <CSWTCH.3+0x1b0>
    80000e6c:	9782                	jalr	a5
    80000e6e:	0c800513          	li	a0,200
    80000e72:	00000097          	auipc	ra,0x0
    80000e76:	2b2080e7          	jalr	690(ra) # 80001124 <usleep>
    80000e7a:	b3c9                	j	80000c3c <main+0xc38>

0000000080000e7c <deregister_tm_clones>:
    80000e7c:	00001517          	auipc	a0,0x1
    80000e80:	10450513          	addi	a0,a0,260 # 80001f80 <__TMC_END__>
    80000e84:	00001797          	auipc	a5,0x1
    80000e88:	0fc78793          	addi	a5,a5,252 # 80001f80 <__TMC_END__>
    80000e8c:	00a78963          	beq	a5,a0,80000e9e <deregister_tm_clones+0x22>
    80000e90:	00000337          	lui	t1,0x0
    80000e94:	00030313          	mv	t1,t1
    80000e98:	00030363          	beqz	t1,80000e9e <deregister_tm_clones+0x22>
    80000e9c:	8302                	jr	t1
    80000e9e:	8082                	ret

0000000080000ea0 <__do_global_dtors_aux>:
    80000ea0:	00001797          	auipc	a5,0x1
    80000ea4:	1187c783          	lbu	a5,280(a5) # 80001fb8 <completed.5485>
    80000ea8:	ef85                	bnez	a5,80000ee0 <__do_global_dtors_aux+0x40>
    80000eaa:	1141                	addi	sp,sp,-16
    80000eac:	e406                	sd	ra,8(sp)
    80000eae:	00000097          	auipc	ra,0x0
    80000eb2:	fce080e7          	jalr	-50(ra) # 80000e7c <deregister_tm_clones>
    80000eb6:	000007b7          	lui	a5,0x0
    80000eba:	00078793          	mv	a5,a5
    80000ebe:	cb89                	beqz	a5,80000ed0 <__do_global_dtors_aux+0x30>
    80000ec0:	00001517          	auipc	a0,0x1
    80000ec4:	c0850513          	addi	a0,a0,-1016 # 80001ac8 <__FRAME_END__>
    80000ec8:	00000097          	auipc	ra,0x0
    80000ecc:	000000e7          	jalr	zero # 0 <_start-0x80000000>
    80000ed0:	60a2                	ld	ra,8(sp)
    80000ed2:	4785                	li	a5,1
    80000ed4:	00001717          	auipc	a4,0x1
    80000ed8:	0ef70223          	sb	a5,228(a4) # 80001fb8 <completed.5485>
    80000edc:	0141                	addi	sp,sp,16
    80000ede:	8082                	ret
    80000ee0:	8082                	ret

0000000080000ee2 <fpioa_set_io_pull>:
}

int fpioa_set_io_pull(int number, fpioa_pull_t pull)
{
    /* Check parameters */
    if(number < 0 || number >= FPIOA_NUM_IO || pull >= FPIOA_PULL_MAX)
    80000ee2:	02f00793          	li	a5,47
    80000ee6:	04a7ec63          	bltu	a5,a0,80000f3e <fpioa_set_io_pull+0x5c>
    80000eea:	4789                	li	a5,2
    80000eec:	04b7e963          	bltu	a5,a1,80000f3e <fpioa_set_io_pull+0x5c>
        return -1;

    /* Atomic read register */
    fpioa_io_config_t cfg = fpioa->io[number];
    80000ef0:	1582                	slli	a1,a1,0x20
    80000ef2:	9181                	srli	a1,a1,0x20
            break;
        default:
            break;
    }
    /* Atomic write register */
    fpioa->io[number] = cfg;
    80000ef4:	00000717          	auipc	a4,0x0
    80000ef8:	51c70713          	addi	a4,a4,1308 # 80001410 <CSWTCH.14>
    80000efc:	972e                	add	a4,a4,a1
    fpioa_io_config_t cfg = fpioa->io[number];
    80000efe:	502b07b7          	lui	a5,0x502b0
    80000f02:	050a                	slli	a0,a0,0x2
    80000f04:	953e                	add	a0,a0,a5
    fpioa->io[number] = cfg;
    80000f06:	00074783          	lbu	a5,0(a4)
    80000f0a:	00000697          	auipc	a3,0x0
    80000f0e:	50e68693          	addi	a3,a3,1294 # 80001418 <CSWTCH.15>
    80000f12:	95b6                	add	a1,a1,a3
    fpioa_io_config_t cfg = fpioa->io[number];
    80000f14:	4118                	lw	a4,0(a0)
    switch(pull)
    80000f16:	0005c683          	lbu	a3,0(a1)
    fpioa->io[number] = cfg;
    80000f1a:	8b85                	andi	a5,a5,1
    80000f1c:	0107961b          	slliw	a2,a5,0x10
    80000f20:	77c1                	lui	a5,0xffff0
    80000f22:	17fd                	addi	a5,a5,-1
    80000f24:	8ff9                	and	a5,a5,a4
    80000f26:	0016f713          	andi	a4,a3,1
    80000f2a:	7681                	lui	a3,0xfffe0
    80000f2c:	8fd1                	or	a5,a5,a2
    80000f2e:	16fd                	addi	a3,a3,-1
    80000f30:	0117171b          	slliw	a4,a4,0x11
    80000f34:	8ff5                	and	a5,a5,a3
    80000f36:	8fd9                	or	a5,a5,a4
    80000f38:	c11c                	sw	a5,0(a0)
    return 0;
    80000f3a:	4501                	li	a0,0
    80000f3c:	8082                	ret
        return -1;
    80000f3e:	557d                	li	a0,-1
}
    80000f40:	8082                	ret

0000000080000f42 <fpioa_set_function_raw>:
}

int fpioa_set_function_raw(int number, fpioa_function_t function)
{
    /* Check parameters */
    if(number < 0 || number >= FPIOA_NUM_IO || function < 0 || function >= FUNC_MAX)
    80000f42:	02f00793          	li	a5,47
    80000f46:	02a7e963          	bltu	a5,a0,80000f78 <fpioa_set_function_raw+0x36>
    80000f4a:	0ff00793          	li	a5,255
    80000f4e:	02b7e563          	bltu	a5,a1,80000f78 <fpioa_set_function_raw+0x36>
        return -1;
    /* Atomic write register */
    fpioa->io[number] = (const fpioa_io_config_t){
        .ch_sel = function_config[function].ch_sel,
    80000f52:	1582                	slli	a1,a1,0x20
    80000f54:	00000797          	auipc	a5,0x0
    80000f58:	4cc78793          	addi	a5,a5,1228 # 80001420 <function_config>
    80000f5c:	81f9                	srli	a1,a1,0x1e
    80000f5e:	95be                	add	a1,a1,a5
    80000f60:	419c                	lw	a5,0(a1)
    fpioa->io[number] = (const fpioa_io_config_t){
    80000f62:	00fc0737          	lui	a4,0xfc0
    80000f66:	177d                	addi	a4,a4,-1
    80000f68:	8f7d                	and	a4,a4,a5
    80000f6a:	050a                	slli	a0,a0,0x2
    80000f6c:	502b07b7          	lui	a5,0x502b0
    80000f70:	953e                	add	a0,a0,a5
    80000f72:	c118                	sw	a4,0(a0)
        .ie_inv = function_config[function].ie_inv,
        .di_inv = function_config[function].di_inv,
        .st = function_config[function].st,
        /* resv and pad_di do not need initialization */
    };
    return 0;
    80000f74:	4501                	li	a0,0
    80000f76:	8082                	ret
        return -1;
    80000f78:	557d                	li	a0,-1
}
    80000f7a:	8082                	ret

0000000080000f7c <fpioa_set_function>:

int fpioa_set_function(int number, fpioa_function_t function)
{
    uint8_t index = 0;
    /* Check parameters */
    if(number < 0 || number >= FPIOA_NUM_IO || function < 0 || function >= FUNC_MAX)
    80000f7c:	02f00793          	li	a5,47
    80000f80:	08a7e063          	bltu	a5,a0,80001000 <fpioa_set_function+0x84>
{
    80000f84:	7179                	addi	sp,sp,-48
    80000f86:	ec26                	sd	s1,24(sp)
    80000f88:	f406                	sd	ra,40(sp)
    80000f8a:	f022                	sd	s0,32(sp)
    80000f8c:	e84a                	sd	s2,16(sp)
    80000f8e:	e44e                	sd	s3,8(sp)
    80000f90:	e052                	sd	s4,0(sp)
    if(number < 0 || number >= FPIOA_NUM_IO || function < 0 || function >= FUNC_MAX)
    80000f92:	0ff00793          	li	a5,255
    80000f96:	84ae                	mv	s1,a1
    80000f98:	06b7e663          	bltu	a5,a1,80001004 <fpioa_set_function+0x88>
        return -1;
    if(function == FUNC_RESV0)
    80000f9c:	07800793          	li	a5,120
    80000fa0:	8a2a                	mv	s4,a0
    80000fa2:	4401                	li	s0,0
        return 0;
    }
    /* Compare all IO */
    for(index = 0; index < FPIOA_NUM_IO; index++)
    {
        if((fpioa->io[index].ch_sel == function) && (index != number))
    80000fa4:	502b09b7          	lui	s3,0x502b0
    for(index = 0; index < FPIOA_NUM_IO; index++)
    80000fa8:	03000913          	li	s2,48
    if(function == FUNC_RESV0)
    80000fac:	02f58163          	beq	a1,a5,80000fce <fpioa_set_function+0x52>
        if((fpioa->io[index].ch_sel == function) && (index != number))
    80000fb0:	0004071b          	sext.w	a4,s0
    80000fb4:	00271793          	slli	a5,a4,0x2
    80000fb8:	97ce                	add	a5,a5,s3
    80000fba:	439c                	lw	a5,0(a5)
    80000fbc:	2405                	addiw	s0,s0,1
    80000fbe:	0ff7f793          	andi	a5,a5,255
    80000fc2:	02978363          	beq	a5,s1,80000fe8 <fpioa_set_function+0x6c>
    for(index = 0; index < FPIOA_NUM_IO; index++)
    80000fc6:	ff2415e3          	bne	s0,s2,80000fb0 <fpioa_set_function+0x34>
            fpioa_set_function_raw(index, FUNC_RESV0);
    }
    fpioa_set_function_raw(number, function);
    80000fca:	85a6                	mv	a1,s1
    80000fcc:	8552                	mv	a0,s4
    80000fce:	00000097          	auipc	ra,0x0
    80000fd2:	f74080e7          	jalr	-140(ra) # 80000f42 <fpioa_set_function_raw>
    return 0;
    80000fd6:	4501                	li	a0,0
}
    80000fd8:	70a2                	ld	ra,40(sp)
    80000fda:	7402                	ld	s0,32(sp)
    80000fdc:	64e2                	ld	s1,24(sp)
    80000fde:	6942                	ld	s2,16(sp)
    80000fe0:	69a2                	ld	s3,8(sp)
    80000fe2:	6a02                	ld	s4,0(sp)
    80000fe4:	6145                	addi	sp,sp,48
    80000fe6:	8082                	ret
            fpioa_set_function_raw(index, FUNC_RESV0);
    80000fe8:	07800593          	li	a1,120
    80000fec:	853a                	mv	a0,a4
        if((fpioa->io[index].ch_sel == function) && (index != number))
    80000fee:	fd470ce3          	beq	a4,s4,80000fc6 <fpioa_set_function+0x4a>
            fpioa_set_function_raw(index, FUNC_RESV0);
    80000ff2:	00000097          	auipc	ra,0x0
    80000ff6:	f50080e7          	jalr	-176(ra) # 80000f42 <fpioa_set_function_raw>
    for(index = 0; index < FPIOA_NUM_IO; index++)
    80000ffa:	fb241be3          	bne	s0,s2,80000fb0 <fpioa_set_function+0x34>
    80000ffe:	b7f1                	j	80000fca <fpioa_set_function+0x4e>
        return -1;
    80001000:	557d                	li	a0,-1
}
    80001002:	8082                	ret
        return -1;
    80001004:	557d                	li	a0,-1
    80001006:	bfc9                	j	80000fd8 <fpioa_set_function+0x5c>

0000000080001008 <fpioa_get_io_by_function>:
}

int fpioa_get_io_by_function(fpioa_function_t function)
{
    int index = 0;
    for(index = 0; index < FPIOA_NUM_IO; index++)
    80001008:	4781                	li	a5,0
    {
        if(fpioa->io[index].ch_sel == function)
    8000100a:	502b06b7          	lui	a3,0x502b0
    for(index = 0; index < FPIOA_NUM_IO; index++)
    8000100e:	03000613          	li	a2,48
    80001012:	a021                	j	8000101a <fpioa_get_io_by_function+0x12>
    80001014:	2785                	addiw	a5,a5,1
    80001016:	00c78c63          	beq	a5,a2,8000102e <fpioa_get_io_by_function+0x26>
        if(fpioa->io[index].ch_sel == function)
    8000101a:	00279713          	slli	a4,a5,0x2
    8000101e:	9736                	add	a4,a4,a3
    80001020:	4318                	lw	a4,0(a4)
    80001022:	0ff77713          	andi	a4,a4,255
    80001026:	fea717e3          	bne	a4,a0,80001014 <fpioa_get_io_by_function+0xc>
            return index;
    }

    return -1;
}
    8000102a:	853e                	mv	a0,a5
    8000102c:	8082                	ret
    return -1;
    8000102e:	57fd                	li	a5,-1
}
    80001030:	853e                	mv	a0,a5
    80001032:	8082                	ret

0000000080001034 <set_bit>:
static gpiohs_pin_instance_t pin_instance[32];
*/

void set_bit(volatile uint32_t *bits, uint32_t mask, uint32_t value)
{
    uint32_t org = (*bits) & ~mask;
    80001034:	411c                	lw	a5,0(a0)
    80001036:	2781                	sext.w	a5,a5
    *bits = org | (value & mask);
    80001038:	8e3d                	xor	a2,a2,a5
    8000103a:	8df1                	and	a1,a1,a2
    8000103c:	8fad                	xor	a5,a5,a1
    8000103e:	c11c                	sw	a5,0(a0)
}
    80001040:	8082                	ret

0000000080001042 <set_bit_offset>:

void set_bit_offset(volatile uint32_t *bits, uint32_t mask, size_t offset, uint32_t value)
{
    set_bit(bits, mask << offset, value << offset);
    80001042:	0006079b          	sext.w	a5,a2
    80001046:	00f6963b          	sllw	a2,a3,a5
    8000104a:	00f595bb          	sllw	a1,a1,a5
    8000104e:	00000317          	auipc	t1,0x0
    80001052:	fe630067          	jr	-26(t1) # 80001034 <set_bit>

0000000080001056 <set_gpio_bit>:
}

void set_gpio_bit(volatile uint32_t *bits, size_t offset, uint32_t value)
{
    set_bit_offset(bits, 1, offset, value);
    80001056:	86b2                	mv	a3,a2
    80001058:	862e                	mv	a2,a1
    8000105a:	4585                	li	a1,1
    8000105c:	00000317          	auipc	t1,0x0
    80001060:	fe630067          	jr	-26(t1) # 80001042 <set_bit_offset>

0000000080001064 <get_bit>:
}

uint32_t get_bit(volatile uint32_t *bits, uint32_t mask, size_t offset)
{
    return ((*bits) & (mask << offset)) >> offset;
    80001064:	411c                	lw	a5,0(a0)
    80001066:	2601                	sext.w	a2,a2
    80001068:	00c595bb          	sllw	a1,a1,a2
    8000106c:	2781                	sext.w	a5,a5
    8000106e:	8fed                	and	a5,a5,a1
}
    80001070:	00c7d53b          	srlw	a0,a5,a2
    80001074:	8082                	ret

0000000080001076 <get_gpio_bit>:

uint32_t get_gpio_bit(volatile uint32_t *bits, size_t offset)
{
    return get_bit(bits, 1, offset);
    80001076:	862e                	mv	a2,a1
    80001078:	4585                	li	a1,1
    8000107a:	00000317          	auipc	t1,0x0
    8000107e:	fea30067          	jr	-22(t1) # 80001064 <get_bit>

0000000080001082 <gpiohs_set_drive_mode>:




void gpiohs_set_drive_mode(uint8_t pin, gpio_drive_mode_t mode)
{
    80001082:	1101                	addi	sp,sp,-32
    80001084:	e426                	sd	s1,8(sp)
    80001086:	84aa                	mv	s1,a0
    int io_number = fpioa_get_io_by_function(FUNC_GPIOHS0 + pin);
    80001088:	0561                	addi	a0,a0,24
{
    8000108a:	e822                	sd	s0,16(sp)
    8000108c:	ec06                	sd	ra,24(sp)
    8000108e:	842e                	mv	s0,a1
    int io_number = fpioa_get_io_by_function(FUNC_GPIOHS0 + pin);
    80001090:	00000097          	auipc	ra,0x0
    80001094:	f78080e7          	jalr	-136(ra) # 80001008 <fpioa_get_io_by_function>

    fpioa_pull_t pull = FPIOA_PULL_NONE;
    uint32_t dir = 0;

    switch(mode)
    80001098:	fff4059b          	addiw	a1,s0,-1
    8000109c:	0005871b          	sext.w	a4,a1
    800010a0:	4789                	li	a5,2
    800010a2:	02e7fd63          	bleu	a4,a5,800010dc <gpiohs_set_drive_mode+0x5a>
            break;
        default:
            break;
    }

    fpioa_set_io_pull(io_number, pull);
    800010a6:	4581                	li	a1,0
    800010a8:	00000097          	auipc	ra,0x0
    800010ac:	e3a080e7          	jalr	-454(ra) # 80000ee2 <fpioa_set_io_pull>
    volatile uint32_t *reg = dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    800010b0:	38001537          	lui	a0,0x38001
    800010b4:	00450413          	addi	s0,a0,4 # 38001004 <_start-0x47ffeffc>
    volatile uint32_t *reg_d = !dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    800010b8:	0521                	addi	a0,a0,8
    set_gpio_bit(reg_d, pin, 0);
    800010ba:	85a6                	mv	a1,s1
    800010bc:	4601                	li	a2,0
    800010be:	00000097          	auipc	ra,0x0
    800010c2:	f98080e7          	jalr	-104(ra) # 80001056 <set_gpio_bit>
    set_gpio_bit(reg, pin, 1);
    800010c6:	8522                	mv	a0,s0
}
    800010c8:	6442                	ld	s0,16(sp)
    800010ca:	60e2                	ld	ra,24(sp)
    set_gpio_bit(reg, pin, 1);
    800010cc:	85a6                	mv	a1,s1
}
    800010ce:	64a2                	ld	s1,8(sp)
    set_gpio_bit(reg, pin, 1);
    800010d0:	4605                	li	a2,1
}
    800010d2:	6105                	addi	sp,sp,32
    set_gpio_bit(reg, pin, 1);
    800010d4:	00000317          	auipc	t1,0x0
    800010d8:	f8230067          	jr	-126(t1) # 80001056 <set_gpio_bit>
    800010dc:	1582                	slli	a1,a1,0x20
    800010de:	81f9                	srli	a1,a1,0x1e
    fpioa_set_io_pull(io_number, pull);
    800010e0:	00000797          	auipc	a5,0x0
    800010e4:	74078793          	addi	a5,a5,1856 # 80001820 <CSWTCH.2>
    800010e8:	00000717          	auipc	a4,0x0
    800010ec:	74870713          	addi	a4,a4,1864 # 80001830 <CSWTCH.3>
    800010f0:	972e                	add	a4,a4,a1
    800010f2:	95be                	add	a1,a1,a5
    800010f4:	418c                	lw	a1,0(a1)
    800010f6:	4300                	lw	s0,0(a4)
    800010f8:	00000097          	auipc	ra,0x0
    800010fc:	dea080e7          	jalr	-534(ra) # 80000ee2 <fpioa_set_io_pull>
    volatile uint32_t *reg = dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    80001100:	38001537          	lui	a0,0x38001
    80001104:	c409                	beqz	s0,8000110e <gpiohs_set_drive_mode+0x8c>
    80001106:	00850413          	addi	s0,a0,8 # 38001008 <_start-0x47ffeff8>
    volatile uint32_t *reg_d = !dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    8000110a:	0511                	addi	a0,a0,4
    8000110c:	b77d                	j	800010ba <gpiohs_set_drive_mode+0x38>
    volatile uint32_t *reg = dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    8000110e:	00450413          	addi	s0,a0,4
    volatile uint32_t *reg_d = !dir ? gpiohs->output_en.u32 : gpiohs->input_en.u32;
    80001112:	0521                	addi	a0,a0,8
    80001114:	b75d                	j	800010ba <gpiohs_set_drive_mode+0x38>

0000000080001116 <gpiohs_get_pin>:

gpio_pin_value_t gpiohs_get_pin(uint8_t pin)
{
    return get_gpio_bit(gpiohs->input_val.u32, pin);
    80001116:	85aa                	mv	a1,a0
    80001118:	38001537          	lui	a0,0x38001
    8000111c:	00000317          	auipc	t1,0x0
    80001120:	f5a30067          	jr	-166(t1) # 80001076 <get_gpio_bit>

0000000080001124 <usleep>:
#define BYTESWAP(x) ((ROTR((x), 8) & 0xff00ff00L) | (ROTL((x), 8) & 0x00ff00ffL))
#define BYTESWAP64(x) byteswap64(x)

int usleep(uint64_t usec)
{
    uint64_t cycle = read_cycle();
    80001124:	b0002773          	csrr	a4,mcycle
    uint64_t nop_all = usec * DEFAULT_CPU_CLOCK / 1000000UL;
    80001128:	173ef7b7          	lui	a5,0x173ef
    8000112c:	d8078793          	addi	a5,a5,-640 # 173eed80 <_start-0x68c11280>
    80001130:	02f50533          	mul	a0,a0,a5
    80001134:	000f47b7          	lui	a5,0xf4
    80001138:	24078793          	addi	a5,a5,576 # f4240 <_start-0x7ff0bdc0>
    8000113c:	02f55533          	divu	a0,a0,a5
    while(1)
    {
        if(read_cycle() - cycle >= nop_all)
    80001140:	b00027f3          	csrr	a5,mcycle
    80001144:	8f99                	sub	a5,a5,a4
    80001146:	fea7ede3          	bltu	a5,a0,80001140 <usleep+0x1c>
            break;
    }
    return 0;
}
    8000114a:	4501                	li	a0,0
    8000114c:	8082                	ret

000000008000114e <sha256_init>:
    uint32_t b = (uint32_t)x;
    return ((uint64_t)BYTESWAP(b) << 32) | (uint64_t)BYTESWAP(a);
}

void sha256_init(sha256_context_t *context, size_t input_len)
{
    8000114e:	1101                	addi	sp,sp,-32
    //sysctl_clock_enable(SYSCTL_CLOCK_SHA);
    sysctl->clk_en_cent.apb0_clk_en = 1;
    80001150:	00001797          	auipc	a5,0x1
    80001154:	e407b783          	ld	a5,-448(a5) # 80001f90 <__TMC_END__+0x10>
{
    80001158:	e822                	sd	s0,16(sp)
    sysctl->clk_en_cent.apb0_clk_en = 1;
    8000115a:	6380                	ld	s0,0(a5)
{
    8000115c:	e426                	sd	s1,8(sp)
    8000115e:	e04a                	sd	s2,0(sp)
    80001160:	ec06                	sd	ra,24(sp)
    sysctl->clk_en_cent.apb0_clk_en = 1;
    80001162:	5418                	lw	a4,40(s0)
    sysctl->clk_en_peri.sha_clk_en = 1;
    80001164:	040006b7          	lui	a3,0x4000
{
    80001168:	892a                	mv	s2,a0
    sysctl->clk_en_cent.apb0_clk_en = 1;
    8000116a:	00876713          	ori	a4,a4,8
    8000116e:	d418                	sw	a4,40(s0)
    sysctl->clk_en_peri.sha_clk_en = 1;
    80001170:	5458                	lw	a4,44(s0)
    //sysctl_reset(SYSCTL_RESET_SHA);
    sysctl->peri_reset.sha_reset = 1;
    usleep(10);
    80001172:	4529                	li	a0,10
{
    80001174:	84ae                	mv	s1,a1
    sysctl->clk_en_peri.sha_clk_en = 1;
    80001176:	8f55                	or	a4,a4,a3
    80001178:	d458                	sw	a4,44(s0)
    sysctl->peri_reset.sha_reset = 1;
    8000117a:	585c                	lw	a5,52(s0)
    sysctl->peri_reset.sha_reset = 0;

    sha256->sha_num_reg.sha_data_cnt = (uint32_t)((input_len + SHA256_BLOCK_LEN + 8) / SHA256_BLOCK_LEN);
    8000117c:	04848493          	addi	s1,s1,72
    80001180:	8099                	srli	s1,s1,0x6
    sysctl->peri_reset.sha_reset = 1;
    80001182:	8fd5                	or	a5,a5,a3
    80001184:	d85c                	sw	a5,52(s0)
    usleep(10);
    80001186:	00000097          	auipc	ra,0x0
    8000118a:	f9e080e7          	jalr	-98(ra) # 80001124 <usleep>
    sysctl->peri_reset.sha_reset = 0;
    8000118e:	585c                	lw	a5,52(s0)
    80001190:	fc000737          	lui	a4,0xfc000
    80001194:	177d                	addi	a4,a4,-1
    80001196:	8ff9                	and	a5,a5,a4
    80001198:	d85c                	sw	a5,52(s0)
    sha256->sha_num_reg.sha_data_cnt = (uint32_t)((input_len + SHA256_BLOCK_LEN + 8) / SHA256_BLOCK_LEN);
    8000119a:	502c07b7          	lui	a5,0x502c0
    8000119e:	5798                	lw	a4,40(a5)
    800011a0:	76c1                	lui	a3,0xffff0
    800011a2:	14c2                	slli	s1,s1,0x30
    800011a4:	8f75                	and	a4,a4,a3
    800011a6:	90c1                	srli	s1,s1,0x30
    800011a8:	8cd9                	or	s1,s1,a4
    800011aa:	d784                	sw	s1,40(a5)
    sha256->sha_function_reg_1.dma_en = 0x0;
    800011ac:	5bd8                	lw	a4,52(a5)
    sha256->sha_function_reg_0.sha_endian = SHA256_BIG_ENDIAN;
    800011ae:	66c1                	lui	a3,0x10
    sha256->sha_function_reg_1.dma_en = 0x0;
    800011b0:	9b79                	andi	a4,a4,-2
    800011b2:	dbd8                	sw	a4,52(a5)
    sha256->sha_function_reg_0.sha_endian = SHA256_BIG_ENDIAN;
    800011b4:	57d8                	lw	a4,44(a5)
    800011b6:	8f55                	or	a4,a4,a3
    800011b8:	d7d8                	sw	a4,44(a5)
    sha256->sha_function_reg_0.sha_en = ENABLE_SHA;
    800011ba:	57d8                	lw	a4,44(a5)
    800011bc:	00176713          	ori	a4,a4,1
    800011c0:	d7d8                	sw	a4,44(a5)
    context->total_len = 0L;
    context->buffer_len = 0L;
}
    800011c2:	60e2                	ld	ra,24(sp)
    800011c4:	6442                	ld	s0,16(sp)
    context->total_len = 0L;
    800011c6:	00093023          	sd	zero,0(s2)
    context->buffer_len = 0L;
    800011ca:	00093423          	sd	zero,8(s2)
}
    800011ce:	64a2                	ld	s1,8(sp)
    800011d0:	6902                	ld	s2,0(sp)
    800011d2:	6105                	addi	sp,sp,32
    800011d4:	8082                	ret

00000000800011d6 <sha256_update>:
    const uint8_t *data = input;
    size_t buffer_bytes_left;
    size_t bytes_to_copy;
    uint32_t i;

    while(input_len)
    800011d6:	c245                	beqz	a2,80001276 <sha256_update+0xa0>
{
    800011d8:	7139                	addi	sp,sp,-64
    800011da:	f04a                	sd	s2,32(sp)
    800011dc:	892a                	mv	s2,a0
    800011de:	6508                	ld	a0,8(a0)
    800011e0:	f822                	sd	s0,48(sp)
    800011e2:	ec4e                	sd	s3,24(sp)
    800011e4:	e852                	sd	s4,16(sp)
    800011e6:	e456                	sd	s5,8(sp)
    800011e8:	e05a                	sd	s6,0(sp)
    800011ea:	fc06                	sd	ra,56(sp)
    800011ec:	f426                	sd	s1,40(sp)
    800011ee:	89b2                	mv	s3,a2
    800011f0:	8a2e                	mv	s4,a1
    {
        buffer_bytes_left = SHA256_BLOCK_LEN - context->buffer_len;
    800011f2:	04000b13          	li	s6,64
    800011f6:	05090a93          	addi	s5,s2,80
        input_len -= bytes_to_copy;
        if(context->buffer_len == SHA256_BLOCK_LEN)
        {
            for(i = 0; i < 16; i++)
            {
                while(sha256->sha_function_reg_1.fifo_in_full)
    800011fa:	502c0437          	lui	s0,0x502c0
        buffer_bytes_left = SHA256_BLOCK_LEN - context->buffer_len;
    800011fe:	40ab04b3          	sub	s1,s6,a0
    80001202:	0099f363          	bleu	s1,s3,80001208 <sha256_update+0x32>
    80001206:	84ce                	mv	s1,s3
        memcpy(&context->buffer.bytes[context->buffer_len], data, bytes_to_copy);
    80001208:	0541                	addi	a0,a0,16
    8000120a:	85d2                	mv	a1,s4
    8000120c:	8626                	mv	a2,s1
    8000120e:	954a                	add	a0,a0,s2
    80001210:	00000097          	auipc	ra,0x0
    80001214:	144080e7          	jalr	324(ra) # 80001354 <memcpy>
        context->total_len += bytes_to_copy * 8L;
    80001218:	00093783          	ld	a5,0(s2)
        context->buffer_len += bytes_to_copy;
    8000121c:	00893503          	ld	a0,8(s2)
        context->total_len += bytes_to_copy * 8L;
    80001220:	00349713          	slli	a4,s1,0x3
    80001224:	97ba                	add	a5,a5,a4
        context->buffer_len += bytes_to_copy;
    80001226:	9526                	add	a0,a0,s1
        context->total_len += bytes_to_copy * 8L;
    80001228:	00f93023          	sd	a5,0(s2)
        context->buffer_len += bytes_to_copy;
    8000122c:	00a93423          	sd	a0,8(s2)
        data += bytes_to_copy;
    80001230:	9a26                	add	s4,s4,s1
        input_len -= bytes_to_copy;
    80001232:	409989b3          	sub	s3,s3,s1
        if(context->buffer_len == SHA256_BLOCK_LEN)
    80001236:	01650e63          	beq	a0,s6,80001252 <sha256_update+0x7c>
    while(input_len)
    8000123a:	fc0992e3          	bnez	s3,800011fe <sha256_update+0x28>
                sha256->sha_data_in1 = context->buffer.words[i];
            }
            context->buffer_len = 0L;
        }
    }
}
    8000123e:	70e2                	ld	ra,56(sp)
    80001240:	7442                	ld	s0,48(sp)
    80001242:	74a2                	ld	s1,40(sp)
    80001244:	7902                	ld	s2,32(sp)
    80001246:	69e2                	ld	s3,24(sp)
    80001248:	6a42                	ld	s4,16(sp)
    8000124a:	6aa2                	ld	s5,8(sp)
    8000124c:	6b02                	ld	s6,0(sp)
    8000124e:	6121                	addi	sp,sp,64
    80001250:	8082                	ret
    80001252:	01090713          	addi	a4,s2,16
                while(sha256->sha_function_reg_1.fifo_in_full)
    80001256:	585c                	lw	a5,52(s0)
    80001258:	0087d79b          	srliw	a5,a5,0x8
    8000125c:	8b85                	andi	a5,a5,1
    8000125e:	ffe5                	bnez	a5,80001256 <sha256_update+0x80>
                sha256->sha_data_in1 = context->buffer.words[i];
    80001260:	431c                	lw	a5,0(a4)
    80001262:	0711                	addi	a4,a4,4
    80001264:	d01c                	sw	a5,32(s0)
            for(i = 0; i < 16; i++)
    80001266:	feea98e3          	bne	s5,a4,80001256 <sha256_update+0x80>
            context->buffer_len = 0L;
    8000126a:	00093423          	sd	zero,8(s2)
    8000126e:	4501                	li	a0,0
    while(input_len)
    80001270:	f80997e3          	bnez	s3,800011fe <sha256_update+0x28>
    80001274:	b7e9                	j	8000123e <sha256_update+0x68>
    80001276:	8082                	ret

0000000080001278 <sha256_final>:
{
    size_t bytes_to_pad;
    size_t length_pad;
    uint32_t i;

    bytes_to_pad = 120L - context->buffer_len;
    80001278:	651c                	ld	a5,8(a0)
{
    8000127a:	7179                	addi	sp,sp,-48
    bytes_to_pad = 120L - context->buffer_len;
    8000127c:	07800613          	li	a2,120
{
    80001280:	f022                	sd	s0,32(sp)
    80001282:	ec26                	sd	s1,24(sp)
    80001284:	f406                	sd	ra,40(sp)
    if(bytes_to_pad > 64L)
    80001286:	04000713          	li	a4,64
    bytes_to_pad = 120L - context->buffer_len;
    8000128a:	8e1d                	sub	a2,a2,a5
{
    8000128c:	84aa                	mv	s1,a0
    8000128e:	842e                	mv	s0,a1
    if(bytes_to_pad > 64L)
    80001290:	00c77563          	bleu	a2,a4,8000129a <sha256_final+0x22>
        bytes_to_pad -= 64L;
    80001294:	03800613          	li	a2,56
    80001298:	8e1d                	sub	a2,a2,a5
    length_pad = BYTESWAP64(context->total_len);
    8000129a:	6098                	ld	a4,0(s1)
    return ((uint64_t)BYTESWAP(b) << 32) | (uint64_t)BYTESWAP(a);
    8000129c:	ff010337          	lui	t1,0xff010
    800012a0:	00ff08b7          	lui	a7,0xff0
    uint32_t a = (uint32_t)(x >> 32);
    800012a4:	42075593          	srai	a1,a4,0x20
    uint32_t b = (uint32_t)x;
    800012a8:	2701                	sext.w	a4,a4
    return ((uint64_t)BYTESWAP(b) << 32) | (uint64_t)BYTESWAP(a);
    800012aa:	01871e9b          	slliw	t4,a4,0x18
    800012ae:	0087181b          	slliw	a6,a4,0x8
    800012b2:	01859e1b          	slliw	t3,a1,0x18
    800012b6:	0085951b          	slliw	a0,a1,0x8
    800012ba:	0087579b          	srliw	a5,a4,0x8
    800012be:	0187569b          	srliw	a3,a4,0x18
    800012c2:	0085d71b          	srliw	a4,a1,0x8
    800012c6:	0185d59b          	srliw	a1,a1,0x18
    800012ca:	f0030313          	addi	t1,t1,-256 # ffffffffff00ff00 <completed.5485+0xffffffff7f00df48>
    800012ce:	0ff88893          	addi	a7,a7,255 # ff00ff <_start-0x7f00ff01>
    800012d2:	01c76733          	or	a4,a4,t3
    800012d6:	8dc9                	or	a1,a1,a0
    800012d8:	0115f5b3          	and	a1,a1,a7
    800012dc:	01d7e7b3          	or	a5,a5,t4
    800012e0:	00d866b3          	or	a3,a6,a3
    800012e4:	00677733          	and	a4,a4,t1
    800012e8:	0067f7b3          	and	a5,a5,t1
    800012ec:	0116f6b3          	and	a3,a3,a7
    800012f0:	8f4d                	or	a4,a4,a1
    800012f2:	8fd5                	or	a5,a5,a3
    800012f4:	1702                	slli	a4,a4,0x20
    800012f6:	9301                	srli	a4,a4,0x20
    800012f8:	1782                	slli	a5,a5,0x20
    800012fa:	8fd9                	or	a5,a5,a4
    sha256_update(context, padding, bytes_to_pad);
    800012fc:	00000597          	auipc	a1,0x0
    80001300:	78c58593          	addi	a1,a1,1932 # 80001a88 <padding>
    80001304:	8526                	mv	a0,s1
    length_pad = BYTESWAP64(context->total_len);
    80001306:	e43e                	sd	a5,8(sp)
    sha256_update(context, padding, bytes_to_pad);
    80001308:	00000097          	auipc	ra,0x0
    8000130c:	ece080e7          	jalr	-306(ra) # 800011d6 <sha256_update>
    sha256_update(context, &length_pad, 8L);
    80001310:	4621                	li	a2,8
    80001312:	002c                	addi	a1,sp,8
    80001314:	8526                	mv	a0,s1
    80001316:	00000097          	auipc	ra,0x0
    8000131a:	ec0080e7          	jalr	-320(ra) # 800011d6 <sha256_update>
    while(!(sha256->sha_function_reg_0.sha_en))
    8000131e:	502c0737          	lui	a4,0x502c0
    80001322:	575c                	lw	a5,44(a4)
    80001324:	8b85                	andi	a5,a5,1
    80001326:	dff5                	beqz	a5,80001322 <sha256_final+0xaa>
        ;
    if(output)
    80001328:	c00d                	beqz	s0,8000134a <sha256_final+0xd2>
    {
        for(i = 0; i < SHA256_HASH_WORDS; i++)
        {
            *((uint32_t *)output) = sha256->sha_result[SHA256_HASH_WORDS - i - 1];
    8000132a:	4f5c                	lw	a5,28(a4)
    8000132c:	c01c                	sw	a5,0(s0)
    8000132e:	4f1c                	lw	a5,24(a4)
    80001330:	c05c                	sw	a5,4(s0)
    80001332:	4b5c                	lw	a5,20(a4)
    80001334:	c41c                	sw	a5,8(s0)
    80001336:	4b1c                	lw	a5,16(a4)
    80001338:	c45c                	sw	a5,12(s0)
    8000133a:	475c                	lw	a5,12(a4)
    8000133c:	c81c                	sw	a5,16(s0)
    8000133e:	471c                	lw	a5,8(a4)
    80001340:	c85c                	sw	a5,20(s0)
    80001342:	435c                	lw	a5,4(a4)
    80001344:	cc1c                	sw	a5,24(s0)
    80001346:	431c                	lw	a5,0(a4)
    80001348:	cc5c                	sw	a5,28(s0)
            output += 4;
        }
    }
}
    8000134a:	70a2                	ld	ra,40(sp)
    8000134c:	7402                	ld	s0,32(sp)
    8000134e:	64e2                	ld	s1,24(sp)
    80001350:	6145                	addi	sp,sp,48
    80001352:	8082                	ret

0000000080001354 <memcpy>:
    80001354:	00a5c7b3          	xor	a5,a1,a0
    80001358:	8b9d                	andi	a5,a5,7
    8000135a:	00c50733          	add	a4,a0,a2
    8000135e:	e781                	bnez	a5,80001366 <memcpy+0x12>
    80001360:	479d                	li	a5,7
    80001362:	00c7ee63          	bltu	a5,a2,8000137e <memcpy+0x2a>
    80001366:	87aa                	mv	a5,a0
    80001368:	0ae57063          	bleu	a4,a0,80001408 <memcpy+0xb4>
    8000136c:	0005c683          	lbu	a3,0(a1)
    80001370:	0785                	addi	a5,a5,1
    80001372:	0585                	addi	a1,a1,1
    80001374:	fed78fa3          	sb	a3,-1(a5) # 502bffff <_start-0x2fd40001>
    80001378:	fee7eae3          	bltu	a5,a4,8000136c <memcpy+0x18>
    8000137c:	8082                	ret
    8000137e:	00757693          	andi	a3,a0,7
    80001382:	87aa                	mv	a5,a0
    80001384:	ca91                	beqz	a3,80001398 <memcpy+0x44>
    80001386:	0005c683          	lbu	a3,0(a1)
    8000138a:	0785                	addi	a5,a5,1
    8000138c:	0585                	addi	a1,a1,1
    8000138e:	fed78fa3          	sb	a3,-1(a5)
    80001392:	0077f693          	andi	a3,a5,7
    80001396:	b7fd                	j	80001384 <memcpy+0x30>
    80001398:	ff877693          	andi	a3,a4,-8
    8000139c:	fc068613          	addi	a2,a3,-64 # ffc0 <_start-0x7fff0040>
    800013a0:	06c7f063          	bleu	a2,a5,80001400 <memcpy+0xac>
    800013a4:	0005b383          	ld	t2,0(a1)
    800013a8:	0085b283          	ld	t0,8(a1)
    800013ac:	0105bf83          	ld	t6,16(a1)
    800013b0:	0185bf03          	ld	t5,24(a1)
    800013b4:	0205be83          	ld	t4,32(a1)
    800013b8:	0285be03          	ld	t3,40(a1)
    800013bc:	0305b303          	ld	t1,48(a1)
    800013c0:	0385b883          	ld	a7,56(a1)
    800013c4:	04858593          	addi	a1,a1,72
    800013c8:	0077b023          	sd	t2,0(a5)
    800013cc:	ff85b803          	ld	a6,-8(a1)
    800013d0:	0057b423          	sd	t0,8(a5)
    800013d4:	01f7b823          	sd	t6,16(a5)
    800013d8:	01e7bc23          	sd	t5,24(a5)
    800013dc:	03d7b023          	sd	t4,32(a5)
    800013e0:	03c7b423          	sd	t3,40(a5)
    800013e4:	0267b823          	sd	t1,48(a5)
    800013e8:	0317bc23          	sd	a7,56(a5)
    800013ec:	04878793          	addi	a5,a5,72
    800013f0:	ff07bc23          	sd	a6,-8(a5)
    800013f4:	b775                	j	800013a0 <memcpy+0x4c>
    800013f6:	6190                	ld	a2,0(a1)
    800013f8:	07a1                	addi	a5,a5,8
    800013fa:	05a1                	addi	a1,a1,8
    800013fc:	fec7bc23          	sd	a2,-8(a5)
    80001400:	fed7ebe3          	bltu	a5,a3,800013f6 <memcpy+0xa2>
    80001404:	f6e7e4e3          	bltu	a5,a4,8000136c <memcpy+0x18>
    80001408:	8082                	ret
    8000140a:	0000                	unimp
    8000140c:	0000                	unimp
	...
